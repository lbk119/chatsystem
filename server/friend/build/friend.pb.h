// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_2eproto;
namespace lbk {
class ChatSessionCreateReq;
class ChatSessionCreateReqDefaultTypeInternal;
extern ChatSessionCreateReqDefaultTypeInternal _ChatSessionCreateReq_default_instance_;
class ChatSessionCreateRsp;
class ChatSessionCreateRspDefaultTypeInternal;
extern ChatSessionCreateRspDefaultTypeInternal _ChatSessionCreateRsp_default_instance_;
class FriendAddProcessReq;
class FriendAddProcessReqDefaultTypeInternal;
extern FriendAddProcessReqDefaultTypeInternal _FriendAddProcessReq_default_instance_;
class FriendAddProcessRsp;
class FriendAddProcessRspDefaultTypeInternal;
extern FriendAddProcessRspDefaultTypeInternal _FriendAddProcessRsp_default_instance_;
class FriendAddReq;
class FriendAddReqDefaultTypeInternal;
extern FriendAddReqDefaultTypeInternal _FriendAddReq_default_instance_;
class FriendAddRsp;
class FriendAddRspDefaultTypeInternal;
extern FriendAddRspDefaultTypeInternal _FriendAddRsp_default_instance_;
class FriendEvent;
class FriendEventDefaultTypeInternal;
extern FriendEventDefaultTypeInternal _FriendEvent_default_instance_;
class FriendRemoveReq;
class FriendRemoveReqDefaultTypeInternal;
extern FriendRemoveReqDefaultTypeInternal _FriendRemoveReq_default_instance_;
class FriendRemoveRsp;
class FriendRemoveRspDefaultTypeInternal;
extern FriendRemoveRspDefaultTypeInternal _FriendRemoveRsp_default_instance_;
class FriendSearchReq;
class FriendSearchReqDefaultTypeInternal;
extern FriendSearchReqDefaultTypeInternal _FriendSearchReq_default_instance_;
class FriendSearchRsp;
class FriendSearchRspDefaultTypeInternal;
extern FriendSearchRspDefaultTypeInternal _FriendSearchRsp_default_instance_;
class GetChatSessionListReq;
class GetChatSessionListReqDefaultTypeInternal;
extern GetChatSessionListReqDefaultTypeInternal _GetChatSessionListReq_default_instance_;
class GetChatSessionListRsp;
class GetChatSessionListRspDefaultTypeInternal;
extern GetChatSessionListRspDefaultTypeInternal _GetChatSessionListRsp_default_instance_;
class GetChatSessionMemberReq;
class GetChatSessionMemberReqDefaultTypeInternal;
extern GetChatSessionMemberReqDefaultTypeInternal _GetChatSessionMemberReq_default_instance_;
class GetChatSessionMemberRsp;
class GetChatSessionMemberRspDefaultTypeInternal;
extern GetChatSessionMemberRspDefaultTypeInternal _GetChatSessionMemberRsp_default_instance_;
class GetFriendListReq;
class GetFriendListReqDefaultTypeInternal;
extern GetFriendListReqDefaultTypeInternal _GetFriendListReq_default_instance_;
class GetFriendListRsp;
class GetFriendListRspDefaultTypeInternal;
extern GetFriendListRspDefaultTypeInternal _GetFriendListRsp_default_instance_;
class GetPendingFriendEventListReq;
class GetPendingFriendEventListReqDefaultTypeInternal;
extern GetPendingFriendEventListReqDefaultTypeInternal _GetPendingFriendEventListReq_default_instance_;
class GetPendingFriendEventListRsp;
class GetPendingFriendEventListRspDefaultTypeInternal;
extern GetPendingFriendEventListRspDefaultTypeInternal _GetPendingFriendEventListRsp_default_instance_;
}  // namespace lbk
PROTOBUF_NAMESPACE_OPEN
template<> ::lbk::ChatSessionCreateReq* Arena::CreateMaybeMessage<::lbk::ChatSessionCreateReq>(Arena*);
template<> ::lbk::ChatSessionCreateRsp* Arena::CreateMaybeMessage<::lbk::ChatSessionCreateRsp>(Arena*);
template<> ::lbk::FriendAddProcessReq* Arena::CreateMaybeMessage<::lbk::FriendAddProcessReq>(Arena*);
template<> ::lbk::FriendAddProcessRsp* Arena::CreateMaybeMessage<::lbk::FriendAddProcessRsp>(Arena*);
template<> ::lbk::FriendAddReq* Arena::CreateMaybeMessage<::lbk::FriendAddReq>(Arena*);
template<> ::lbk::FriendAddRsp* Arena::CreateMaybeMessage<::lbk::FriendAddRsp>(Arena*);
template<> ::lbk::FriendEvent* Arena::CreateMaybeMessage<::lbk::FriendEvent>(Arena*);
template<> ::lbk::FriendRemoveReq* Arena::CreateMaybeMessage<::lbk::FriendRemoveReq>(Arena*);
template<> ::lbk::FriendRemoveRsp* Arena::CreateMaybeMessage<::lbk::FriendRemoveRsp>(Arena*);
template<> ::lbk::FriendSearchReq* Arena::CreateMaybeMessage<::lbk::FriendSearchReq>(Arena*);
template<> ::lbk::FriendSearchRsp* Arena::CreateMaybeMessage<::lbk::FriendSearchRsp>(Arena*);
template<> ::lbk::GetChatSessionListReq* Arena::CreateMaybeMessage<::lbk::GetChatSessionListReq>(Arena*);
template<> ::lbk::GetChatSessionListRsp* Arena::CreateMaybeMessage<::lbk::GetChatSessionListRsp>(Arena*);
template<> ::lbk::GetChatSessionMemberReq* Arena::CreateMaybeMessage<::lbk::GetChatSessionMemberReq>(Arena*);
template<> ::lbk::GetChatSessionMemberRsp* Arena::CreateMaybeMessage<::lbk::GetChatSessionMemberRsp>(Arena*);
template<> ::lbk::GetFriendListReq* Arena::CreateMaybeMessage<::lbk::GetFriendListReq>(Arena*);
template<> ::lbk::GetFriendListRsp* Arena::CreateMaybeMessage<::lbk::GetFriendListRsp>(Arena*);
template<> ::lbk::GetPendingFriendEventListReq* Arena::CreateMaybeMessage<::lbk::GetPendingFriendEventListReq>(Arena*);
template<> ::lbk::GetPendingFriendEventListRsp* Arena::CreateMaybeMessage<::lbk::GetPendingFriendEventListRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lbk {

// ===================================================================

class GetFriendListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetFriendListReq) */ {
 public:
  inline GetFriendListReq() : GetFriendListReq(nullptr) {};
  virtual ~GetFriendListReq();

  GetFriendListReq(const GetFriendListReq& from);
  GetFriendListReq(GetFriendListReq&& from) noexcept
    : GetFriendListReq() {
    *this = ::std::move(from);
  }

  inline GetFriendListReq& operator=(const GetFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListReq& operator=(GetFriendListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListReq* internal_default_instance() {
    return reinterpret_cast<const GetFriendListReq*>(
               &_GetFriendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetFriendListReq& a, GetFriendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListReq* New() const final {
    return CreateMaybeMessage<GetFriendListReq>(nullptr);
  }

  GetFriendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListReq& from);
  void MergeFrom(const GetFriendListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetFriendListReq";
  }
  protected:
  explicit GetFriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetFriendListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetFriendListRsp) */ {
 public:
  inline GetFriendListRsp() : GetFriendListRsp(nullptr) {};
  virtual ~GetFriendListRsp();

  GetFriendListRsp(const GetFriendListRsp& from);
  GetFriendListRsp(GetFriendListRsp&& from) noexcept
    : GetFriendListRsp() {
    *this = ::std::move(from);
  }

  inline GetFriendListRsp& operator=(const GetFriendListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListRsp& operator=(GetFriendListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListRsp* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRsp*>(
               &_GetFriendListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetFriendListRsp& a, GetFriendListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListRsp* New() const final {
    return CreateMaybeMessage<GetFriendListRsp>(nullptr);
  }

  GetFriendListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListRsp& from);
  void MergeFrom(const GetFriendListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetFriendListRsp";
  }
  protected:
  explicit GetFriendListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .lbk.UserInfo friend_list = 4;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::lbk::UserInfo* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >*
      mutable_friend_list();
  private:
  const ::lbk::UserInfo& _internal_friend_list(int index) const;
  ::lbk::UserInfo* _internal_add_friend_list();
  public:
  const ::lbk::UserInfo& friend_list(int index) const;
  ::lbk::UserInfo* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >&
      friend_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetFriendListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo > friend_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendRemoveReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendRemoveReq) */ {
 public:
  inline FriendRemoveReq() : FriendRemoveReq(nullptr) {};
  virtual ~FriendRemoveReq();

  FriendRemoveReq(const FriendRemoveReq& from);
  FriendRemoveReq(FriendRemoveReq&& from) noexcept
    : FriendRemoveReq() {
    *this = ::std::move(from);
  }

  inline FriendRemoveReq& operator=(const FriendRemoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRemoveReq& operator=(FriendRemoveReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRemoveReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRemoveReq* internal_default_instance() {
    return reinterpret_cast<const FriendRemoveReq*>(
               &_FriendRemoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendRemoveReq& a, FriendRemoveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRemoveReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRemoveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRemoveReq* New() const final {
    return CreateMaybeMessage<FriendRemoveReq>(nullptr);
  }

  FriendRemoveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRemoveReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRemoveReq& from);
  void MergeFrom(const FriendRemoveReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRemoveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendRemoveReq";
  }
  protected:
  explicit FriendRemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kPeerIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string peer_id = 4;
  void clear_peer_id();
  const std::string& peer_id() const;
  void set_peer_id(const std::string& value);
  void set_peer_id(std::string&& value);
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  std::string* mutable_peer_id();
  std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_peer_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_peer_id(
      std::string* peer_id);
  private:
  const std::string& _internal_peer_id() const;
  void _internal_set_peer_id(const std::string& value);
  std::string* _internal_mutable_peer_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendRemoveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendRemoveRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendRemoveRsp) */ {
 public:
  inline FriendRemoveRsp() : FriendRemoveRsp(nullptr) {};
  virtual ~FriendRemoveRsp();

  FriendRemoveRsp(const FriendRemoveRsp& from);
  FriendRemoveRsp(FriendRemoveRsp&& from) noexcept
    : FriendRemoveRsp() {
    *this = ::std::move(from);
  }

  inline FriendRemoveRsp& operator=(const FriendRemoveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRemoveRsp& operator=(FriendRemoveRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRemoveRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRemoveRsp* internal_default_instance() {
    return reinterpret_cast<const FriendRemoveRsp*>(
               &_FriendRemoveRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendRemoveRsp& a, FriendRemoveRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRemoveRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRemoveRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRemoveRsp* New() const final {
    return CreateMaybeMessage<FriendRemoveRsp>(nullptr);
  }

  FriendRemoveRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRemoveRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRemoveRsp& from);
  void MergeFrom(const FriendRemoveRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRemoveRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendRemoveRsp";
  }
  protected:
  explicit FriendRemoveRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendRemoveRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendAddReq) */ {
 public:
  inline FriendAddReq() : FriendAddReq(nullptr) {};
  virtual ~FriendAddReq();

  FriendAddReq(const FriendAddReq& from);
  FriendAddReq(FriendAddReq&& from) noexcept
    : FriendAddReq() {
    *this = ::std::move(from);
  }

  inline FriendAddReq& operator=(const FriendAddReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddReq& operator=(FriendAddReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddReq* internal_default_instance() {
    return reinterpret_cast<const FriendAddReq*>(
               &_FriendAddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FriendAddReq& a, FriendAddReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAddReq* New() const final {
    return CreateMaybeMessage<FriendAddReq>(nullptr);
  }

  FriendAddReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAddReq& from);
  void MergeFrom(const FriendAddReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendAddReq";
  }
  protected:
  explicit FriendAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kRespondentIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string respondent_id = 4;
  void clear_respondent_id();
  const std::string& respondent_id() const;
  void set_respondent_id(const std::string& value);
  void set_respondent_id(std::string&& value);
  void set_respondent_id(const char* value);
  void set_respondent_id(const char* value, size_t size);
  std::string* mutable_respondent_id();
  std::string* release_respondent_id();
  void set_allocated_respondent_id(std::string* respondent_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_respondent_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_respondent_id(
      std::string* respondent_id);
  private:
  const std::string& _internal_respondent_id() const;
  void _internal_set_respondent_id(const std::string& value);
  std::string* _internal_mutable_respondent_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendAddReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr respondent_id_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendAddRsp) */ {
 public:
  inline FriendAddRsp() : FriendAddRsp(nullptr) {};
  virtual ~FriendAddRsp();

  FriendAddRsp(const FriendAddRsp& from);
  FriendAddRsp(FriendAddRsp&& from) noexcept
    : FriendAddRsp() {
    *this = ::std::move(from);
  }

  inline FriendAddRsp& operator=(const FriendAddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddRsp& operator=(FriendAddRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAddRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddRsp* internal_default_instance() {
    return reinterpret_cast<const FriendAddRsp*>(
               &_FriendAddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FriendAddRsp& a, FriendAddRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAddRsp* New() const final {
    return CreateMaybeMessage<FriendAddRsp>(nullptr);
  }

  FriendAddRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAddRsp& from);
  void MergeFrom(const FriendAddRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendAddRsp";
  }
  protected:
  explicit FriendAddRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kNotifyEventIdFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string notify_event_id = 4;
  bool has_notify_event_id() const;
  private:
  bool _internal_has_notify_event_id() const;
  public:
  void clear_notify_event_id();
  const std::string& notify_event_id() const;
  void set_notify_event_id(const std::string& value);
  void set_notify_event_id(std::string&& value);
  void set_notify_event_id(const char* value);
  void set_notify_event_id(const char* value, size_t size);
  std::string* mutable_notify_event_id();
  std::string* release_notify_event_id();
  void set_allocated_notify_event_id(std::string* notify_event_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_notify_event_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_notify_event_id(
      std::string* notify_event_id);
  private:
  const std::string& _internal_notify_event_id() const;
  void _internal_set_notify_event_id(const std::string& value);
  std::string* _internal_mutable_notify_event_id();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendAddRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_event_id_;
  bool success_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddProcessReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendAddProcessReq) */ {
 public:
  inline FriendAddProcessReq() : FriendAddProcessReq(nullptr) {};
  virtual ~FriendAddProcessReq();

  FriendAddProcessReq(const FriendAddProcessReq& from);
  FriendAddProcessReq(FriendAddProcessReq&& from) noexcept
    : FriendAddProcessReq() {
    *this = ::std::move(from);
  }

  inline FriendAddProcessReq& operator=(const FriendAddProcessReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddProcessReq& operator=(FriendAddProcessReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAddProcessReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddProcessReq* internal_default_instance() {
    return reinterpret_cast<const FriendAddProcessReq*>(
               &_FriendAddProcessReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FriendAddProcessReq& a, FriendAddProcessReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddProcessReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddProcessReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAddProcessReq* New() const final {
    return CreateMaybeMessage<FriendAddProcessReq>(nullptr);
  }

  FriendAddProcessReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddProcessReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAddProcessReq& from);
  void MergeFrom(const FriendAddProcessReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddProcessReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendAddProcessReq";
  }
  protected:
  explicit FriendAddProcessReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kNotifyEventIdFieldNumber = 2,
    kApplyUserIdFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
    kAgreeFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string notify_event_id = 2;
  bool has_notify_event_id() const;
  private:
  bool _internal_has_notify_event_id() const;
  public:
  void clear_notify_event_id();
  const std::string& notify_event_id() const;
  void set_notify_event_id(const std::string& value);
  void set_notify_event_id(std::string&& value);
  void set_notify_event_id(const char* value);
  void set_notify_event_id(const char* value, size_t size);
  std::string* mutable_notify_event_id();
  std::string* release_notify_event_id();
  void set_allocated_notify_event_id(std::string* notify_event_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_notify_event_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_notify_event_id(
      std::string* notify_event_id);
  private:
  const std::string& _internal_notify_event_id() const;
  void _internal_set_notify_event_id(const std::string& value);
  std::string* _internal_mutable_notify_event_id();
  public:

  // string apply_user_id = 4;
  void clear_apply_user_id();
  const std::string& apply_user_id() const;
  void set_apply_user_id(const std::string& value);
  void set_apply_user_id(std::string&& value);
  void set_apply_user_id(const char* value);
  void set_apply_user_id(const char* value, size_t size);
  std::string* mutable_apply_user_id();
  std::string* release_apply_user_id();
  void set_allocated_apply_user_id(std::string* apply_user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_apply_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_apply_user_id(
      std::string* apply_user_id);
  private:
  const std::string& _internal_apply_user_id() const;
  void _internal_set_apply_user_id(const std::string& value);
  std::string* _internal_mutable_apply_user_id();
  public:

  // string session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string user_id = 6;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bool agree = 3;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendAddProcessReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_event_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  bool agree_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddProcessRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendAddProcessRsp) */ {
 public:
  inline FriendAddProcessRsp() : FriendAddProcessRsp(nullptr) {};
  virtual ~FriendAddProcessRsp();

  FriendAddProcessRsp(const FriendAddProcessRsp& from);
  FriendAddProcessRsp(FriendAddProcessRsp&& from) noexcept
    : FriendAddProcessRsp() {
    *this = ::std::move(from);
  }

  inline FriendAddProcessRsp& operator=(const FriendAddProcessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddProcessRsp& operator=(FriendAddProcessRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAddProcessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddProcessRsp* internal_default_instance() {
    return reinterpret_cast<const FriendAddProcessRsp*>(
               &_FriendAddProcessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FriendAddProcessRsp& a, FriendAddProcessRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddProcessRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddProcessRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAddProcessRsp* New() const final {
    return CreateMaybeMessage<FriendAddProcessRsp>(nullptr);
  }

  FriendAddProcessRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddProcessRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAddProcessRsp& from);
  void MergeFrom(const FriendAddProcessRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddProcessRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendAddProcessRsp";
  }
  protected:
  explicit FriendAddProcessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kNewSessionIdFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string new_session_id = 4;
  bool has_new_session_id() const;
  private:
  bool _internal_has_new_session_id() const;
  public:
  void clear_new_session_id();
  const std::string& new_session_id() const;
  void set_new_session_id(const std::string& value);
  void set_new_session_id(std::string&& value);
  void set_new_session_id(const char* value);
  void set_new_session_id(const char* value, size_t size);
  std::string* mutable_new_session_id();
  std::string* release_new_session_id();
  void set_allocated_new_session_id(std::string* new_session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_session_id(
      std::string* new_session_id);
  private:
  const std::string& _internal_new_session_id() const;
  void _internal_set_new_session_id(const std::string& value);
  std::string* _internal_mutable_new_session_id();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendAddProcessRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_session_id_;
  bool success_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetPendingFriendEventListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetPendingFriendEventListReq) */ {
 public:
  inline GetPendingFriendEventListReq() : GetPendingFriendEventListReq(nullptr) {};
  virtual ~GetPendingFriendEventListReq();

  GetPendingFriendEventListReq(const GetPendingFriendEventListReq& from);
  GetPendingFriendEventListReq(GetPendingFriendEventListReq&& from) noexcept
    : GetPendingFriendEventListReq() {
    *this = ::std::move(from);
  }

  inline GetPendingFriendEventListReq& operator=(const GetPendingFriendEventListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPendingFriendEventListReq& operator=(GetPendingFriendEventListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPendingFriendEventListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPendingFriendEventListReq* internal_default_instance() {
    return reinterpret_cast<const GetPendingFriendEventListReq*>(
               &_GetPendingFriendEventListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPendingFriendEventListReq& a, GetPendingFriendEventListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPendingFriendEventListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPendingFriendEventListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPendingFriendEventListReq* New() const final {
    return CreateMaybeMessage<GetPendingFriendEventListReq>(nullptr);
  }

  GetPendingFriendEventListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPendingFriendEventListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPendingFriendEventListReq& from);
  void MergeFrom(const GetPendingFriendEventListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPendingFriendEventListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetPendingFriendEventListReq";
  }
  protected:
  explicit GetPendingFriendEventListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetPendingFriendEventListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendEvent) */ {
 public:
  inline FriendEvent() : FriendEvent(nullptr) {};
  virtual ~FriendEvent();

  FriendEvent(const FriendEvent& from);
  FriendEvent(FriendEvent&& from) noexcept
    : FriendEvent() {
    *this = ::std::move(from);
  }

  inline FriendEvent& operator=(const FriendEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendEvent& operator=(FriendEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendEvent* internal_default_instance() {
    return reinterpret_cast<const FriendEvent*>(
               &_FriendEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FriendEvent& a, FriendEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendEvent* New() const final {
    return CreateMaybeMessage<FriendEvent>(nullptr);
  }

  FriendEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendEvent& from);
  void MergeFrom(const FriendEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendEvent";
  }
  protected:
  explicit FriendEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kSenderFieldNumber = 3,
  };
  // string event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  const std::string& event_id() const;
  void set_event_id(const std::string& value);
  void set_event_id(std::string&& value);
  void set_event_id(const char* value);
  void set_event_id(const char* value, size_t size);
  std::string* mutable_event_id();
  std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_event_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_id(
      std::string* event_id);
  private:
  const std::string& _internal_event_id() const;
  void _internal_set_event_id(const std::string& value);
  std::string* _internal_mutable_event_id();
  public:

  // .lbk.UserInfo sender = 3;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::lbk::UserInfo& sender() const;
  ::lbk::UserInfo* release_sender();
  ::lbk::UserInfo* mutable_sender();
  void set_allocated_sender(::lbk::UserInfo* sender);
  private:
  const ::lbk::UserInfo& _internal_sender() const;
  ::lbk::UserInfo* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::lbk::UserInfo* sender);
  ::lbk::UserInfo* unsafe_arena_release_sender();

  // @@protoc_insertion_point(class_scope:lbk.FriendEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
  ::lbk::UserInfo* sender_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetPendingFriendEventListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetPendingFriendEventListRsp) */ {
 public:
  inline GetPendingFriendEventListRsp() : GetPendingFriendEventListRsp(nullptr) {};
  virtual ~GetPendingFriendEventListRsp();

  GetPendingFriendEventListRsp(const GetPendingFriendEventListRsp& from);
  GetPendingFriendEventListRsp(GetPendingFriendEventListRsp&& from) noexcept
    : GetPendingFriendEventListRsp() {
    *this = ::std::move(from);
  }

  inline GetPendingFriendEventListRsp& operator=(const GetPendingFriendEventListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPendingFriendEventListRsp& operator=(GetPendingFriendEventListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPendingFriendEventListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPendingFriendEventListRsp* internal_default_instance() {
    return reinterpret_cast<const GetPendingFriendEventListRsp*>(
               &_GetPendingFriendEventListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetPendingFriendEventListRsp& a, GetPendingFriendEventListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPendingFriendEventListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPendingFriendEventListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPendingFriendEventListRsp* New() const final {
    return CreateMaybeMessage<GetPendingFriendEventListRsp>(nullptr);
  }

  GetPendingFriendEventListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPendingFriendEventListRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPendingFriendEventListRsp& from);
  void MergeFrom(const GetPendingFriendEventListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPendingFriendEventListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetPendingFriendEventListRsp";
  }
  protected:
  explicit GetPendingFriendEventListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .lbk.FriendEvent event = 4;
  int event_size() const;
  private:
  int _internal_event_size() const;
  public:
  void clear_event();
  ::lbk::FriendEvent* mutable_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::FriendEvent >*
      mutable_event();
  private:
  const ::lbk::FriendEvent& _internal_event(int index) const;
  ::lbk::FriendEvent* _internal_add_event();
  public:
  const ::lbk::FriendEvent& event(int index) const;
  ::lbk::FriendEvent* add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::FriendEvent >&
      event() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetPendingFriendEventListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::FriendEvent > event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendSearchReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendSearchReq) */ {
 public:
  inline FriendSearchReq() : FriendSearchReq(nullptr) {};
  virtual ~FriendSearchReq();

  FriendSearchReq(const FriendSearchReq& from);
  FriendSearchReq(FriendSearchReq&& from) noexcept
    : FriendSearchReq() {
    *this = ::std::move(from);
  }

  inline FriendSearchReq& operator=(const FriendSearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendSearchReq& operator=(FriendSearchReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendSearchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendSearchReq* internal_default_instance() {
    return reinterpret_cast<const FriendSearchReq*>(
               &_FriendSearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FriendSearchReq& a, FriendSearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendSearchReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendSearchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendSearchReq* New() const final {
    return CreateMaybeMessage<FriendSearchReq>(nullptr);
  }

  FriendSearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendSearchReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendSearchReq& from);
  void MergeFrom(const FriendSearchReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendSearchReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendSearchReq";
  }
  protected:
  explicit FriendSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSearchKeyFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string search_key = 2;
  void clear_search_key();
  const std::string& search_key() const;
  void set_search_key(const std::string& value);
  void set_search_key(std::string&& value);
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  std::string* mutable_search_key();
  std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_search_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_search_key(
      std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendSearchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendSearchRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.FriendSearchRsp) */ {
 public:
  inline FriendSearchRsp() : FriendSearchRsp(nullptr) {};
  virtual ~FriendSearchRsp();

  FriendSearchRsp(const FriendSearchRsp& from);
  FriendSearchRsp(FriendSearchRsp&& from) noexcept
    : FriendSearchRsp() {
    *this = ::std::move(from);
  }

  inline FriendSearchRsp& operator=(const FriendSearchRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendSearchRsp& operator=(FriendSearchRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendSearchRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendSearchRsp* internal_default_instance() {
    return reinterpret_cast<const FriendSearchRsp*>(
               &_FriendSearchRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FriendSearchRsp& a, FriendSearchRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendSearchRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendSearchRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendSearchRsp* New() const final {
    return CreateMaybeMessage<FriendSearchRsp>(nullptr);
  }

  FriendSearchRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendSearchRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendSearchRsp& from);
  void MergeFrom(const FriendSearchRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendSearchRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.FriendSearchRsp";
  }
  protected:
  explicit FriendSearchRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .lbk.UserInfo user_info = 4;
  int user_info_size() const;
  private:
  int _internal_user_info_size() const;
  public:
  void clear_user_info();
  ::lbk::UserInfo* mutable_user_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >*
      mutable_user_info();
  private:
  const ::lbk::UserInfo& _internal_user_info(int index) const;
  ::lbk::UserInfo* _internal_add_user_info();
  public:
  const ::lbk::UserInfo& user_info(int index) const;
  ::lbk::UserInfo* add_user_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >&
      user_info() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.FriendSearchRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo > user_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetChatSessionListReq) */ {
 public:
  inline GetChatSessionListReq() : GetChatSessionListReq(nullptr) {};
  virtual ~GetChatSessionListReq();

  GetChatSessionListReq(const GetChatSessionListReq& from);
  GetChatSessionListReq(GetChatSessionListReq&& from) noexcept
    : GetChatSessionListReq() {
    *this = ::std::move(from);
  }

  inline GetChatSessionListReq& operator=(const GetChatSessionListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionListReq& operator=(GetChatSessionListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatSessionListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionListReq* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionListReq*>(
               &_GetChatSessionListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetChatSessionListReq& a, GetChatSessionListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionListReq* New() const final {
    return CreateMaybeMessage<GetChatSessionListReq>(nullptr);
  }

  GetChatSessionListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatSessionListReq& from);
  void MergeFrom(const GetChatSessionListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetChatSessionListReq";
  }
  protected:
  explicit GetChatSessionListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetChatSessionListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetChatSessionListRsp) */ {
 public:
  inline GetChatSessionListRsp() : GetChatSessionListRsp(nullptr) {};
  virtual ~GetChatSessionListRsp();

  GetChatSessionListRsp(const GetChatSessionListRsp& from);
  GetChatSessionListRsp(GetChatSessionListRsp&& from) noexcept
    : GetChatSessionListRsp() {
    *this = ::std::move(from);
  }

  inline GetChatSessionListRsp& operator=(const GetChatSessionListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionListRsp& operator=(GetChatSessionListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatSessionListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionListRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionListRsp*>(
               &_GetChatSessionListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetChatSessionListRsp& a, GetChatSessionListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionListRsp* New() const final {
    return CreateMaybeMessage<GetChatSessionListRsp>(nullptr);
  }

  GetChatSessionListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionListRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatSessionListRsp& from);
  void MergeFrom(const GetChatSessionListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetChatSessionListRsp";
  }
  protected:
  explicit GetChatSessionListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatSessionInfoListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .lbk.ChatSessionInfo chat_session_info_list = 4;
  int chat_session_info_list_size() const;
  private:
  int _internal_chat_session_info_list_size() const;
  public:
  void clear_chat_session_info_list();
  ::lbk::ChatSessionInfo* mutable_chat_session_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::ChatSessionInfo >*
      mutable_chat_session_info_list();
  private:
  const ::lbk::ChatSessionInfo& _internal_chat_session_info_list(int index) const;
  ::lbk::ChatSessionInfo* _internal_add_chat_session_info_list();
  public:
  const ::lbk::ChatSessionInfo& chat_session_info_list(int index) const;
  ::lbk::ChatSessionInfo* add_chat_session_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::ChatSessionInfo >&
      chat_session_info_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetChatSessionListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::ChatSessionInfo > chat_session_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class ChatSessionCreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.ChatSessionCreateReq) */ {
 public:
  inline ChatSessionCreateReq() : ChatSessionCreateReq(nullptr) {};
  virtual ~ChatSessionCreateReq();

  ChatSessionCreateReq(const ChatSessionCreateReq& from);
  ChatSessionCreateReq(ChatSessionCreateReq&& from) noexcept
    : ChatSessionCreateReq() {
    *this = ::std::move(from);
  }

  inline ChatSessionCreateReq& operator=(const ChatSessionCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSessionCreateReq& operator=(ChatSessionCreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatSessionCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatSessionCreateReq* internal_default_instance() {
    return reinterpret_cast<const ChatSessionCreateReq*>(
               &_ChatSessionCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ChatSessionCreateReq& a, ChatSessionCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSessionCreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSessionCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatSessionCreateReq* New() const final {
    return CreateMaybeMessage<ChatSessionCreateReq>(nullptr);
  }

  ChatSessionCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatSessionCreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatSessionCreateReq& from);
  void MergeFrom(const ChatSessionCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSessionCreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.ChatSessionCreateReq";
  }
  protected:
  explicit ChatSessionCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kChatSessionNameFieldNumber = 4,
  };
  // repeated string member_id_list = 5;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  const std::string& member_id_list(int index) const;
  std::string* mutable_member_id_list(int index);
  void set_member_id_list(int index, const std::string& value);
  void set_member_id_list(int index, std::string&& value);
  void set_member_id_list(int index, const char* value);
  void set_member_id_list(int index, const char* value, size_t size);
  std::string* add_member_id_list();
  void add_member_id_list(const std::string& value);
  void add_member_id_list(std::string&& value);
  void add_member_id_list(const char* value);
  void add_member_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_member_id_list();
  private:
  const std::string& _internal_member_id_list(int index) const;
  std::string* _internal_add_member_id_list();
  public:

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string chat_session_name = 4;
  void clear_chat_session_name();
  const std::string& chat_session_name() const;
  void set_chat_session_name(const std::string& value);
  void set_chat_session_name(std::string&& value);
  void set_chat_session_name(const char* value);
  void set_chat_session_name(const char* value, size_t size);
  std::string* mutable_chat_session_name();
  std::string* release_chat_session_name();
  void set_allocated_chat_session_name(std::string* chat_session_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chat_session_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chat_session_name(
      std::string* chat_session_name);
  private:
  const std::string& _internal_chat_session_name() const;
  void _internal_set_chat_session_name(const std::string& value);
  std::string* _internal_mutable_chat_session_name();
  public:

  // @@protoc_insertion_point(class_scope:lbk.ChatSessionCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> member_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_name_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class ChatSessionCreateRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.ChatSessionCreateRsp) */ {
 public:
  inline ChatSessionCreateRsp() : ChatSessionCreateRsp(nullptr) {};
  virtual ~ChatSessionCreateRsp();

  ChatSessionCreateRsp(const ChatSessionCreateRsp& from);
  ChatSessionCreateRsp(ChatSessionCreateRsp&& from) noexcept
    : ChatSessionCreateRsp() {
    *this = ::std::move(from);
  }

  inline ChatSessionCreateRsp& operator=(const ChatSessionCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSessionCreateRsp& operator=(ChatSessionCreateRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatSessionCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatSessionCreateRsp* internal_default_instance() {
    return reinterpret_cast<const ChatSessionCreateRsp*>(
               &_ChatSessionCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChatSessionCreateRsp& a, ChatSessionCreateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSessionCreateRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSessionCreateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatSessionCreateRsp* New() const final {
    return CreateMaybeMessage<ChatSessionCreateRsp>(nullptr);
  }

  ChatSessionCreateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatSessionCreateRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatSessionCreateRsp& from);
  void MergeFrom(const ChatSessionCreateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSessionCreateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.ChatSessionCreateRsp";
  }
  protected:
  explicit ChatSessionCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kChatSessionInfoFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .lbk.ChatSessionInfo chat_session_info = 4;
  bool has_chat_session_info() const;
  private:
  bool _internal_has_chat_session_info() const;
  public:
  void clear_chat_session_info();
  const ::lbk::ChatSessionInfo& chat_session_info() const;
  ::lbk::ChatSessionInfo* release_chat_session_info();
  ::lbk::ChatSessionInfo* mutable_chat_session_info();
  void set_allocated_chat_session_info(::lbk::ChatSessionInfo* chat_session_info);
  private:
  const ::lbk::ChatSessionInfo& _internal_chat_session_info() const;
  ::lbk::ChatSessionInfo* _internal_mutable_chat_session_info();
  public:
  void unsafe_arena_set_allocated_chat_session_info(
      ::lbk::ChatSessionInfo* chat_session_info);
  ::lbk::ChatSessionInfo* unsafe_arena_release_chat_session_info();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.ChatSessionCreateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::lbk::ChatSessionInfo* chat_session_info_;
  bool success_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionMemberReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetChatSessionMemberReq) */ {
 public:
  inline GetChatSessionMemberReq() : GetChatSessionMemberReq(nullptr) {};
  virtual ~GetChatSessionMemberReq();

  GetChatSessionMemberReq(const GetChatSessionMemberReq& from);
  GetChatSessionMemberReq(GetChatSessionMemberReq&& from) noexcept
    : GetChatSessionMemberReq() {
    *this = ::std::move(from);
  }

  inline GetChatSessionMemberReq& operator=(const GetChatSessionMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionMemberReq& operator=(GetChatSessionMemberReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatSessionMemberReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionMemberReq* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionMemberReq*>(
               &_GetChatSessionMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetChatSessionMemberReq& a, GetChatSessionMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionMemberReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionMemberReq* New() const final {
    return CreateMaybeMessage<GetChatSessionMemberReq>(nullptr);
  }

  GetChatSessionMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionMemberReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatSessionMemberReq& from);
  void MergeFrom(const GetChatSessionMemberReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionMemberReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetChatSessionMemberReq";
  }
  protected:
  explicit GetChatSessionMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kChatSessionIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string chat_session_id = 4;
  void clear_chat_session_id();
  const std::string& chat_session_id() const;
  void set_chat_session_id(const std::string& value);
  void set_chat_session_id(std::string&& value);
  void set_chat_session_id(const char* value);
  void set_chat_session_id(const char* value, size_t size);
  std::string* mutable_chat_session_id();
  std::string* release_chat_session_id();
  void set_allocated_chat_session_id(std::string* chat_session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chat_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chat_session_id(
      std::string* chat_session_id);
  private:
  const std::string& _internal_chat_session_id() const;
  void _internal_set_chat_session_id(const std::string& value);
  std::string* _internal_mutable_chat_session_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetChatSessionMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_id_;
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionMemberRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetChatSessionMemberRsp) */ {
 public:
  inline GetChatSessionMemberRsp() : GetChatSessionMemberRsp(nullptr) {};
  virtual ~GetChatSessionMemberRsp();

  GetChatSessionMemberRsp(const GetChatSessionMemberRsp& from);
  GetChatSessionMemberRsp(GetChatSessionMemberRsp&& from) noexcept
    : GetChatSessionMemberRsp() {
    *this = ::std::move(from);
  }

  inline GetChatSessionMemberRsp& operator=(const GetChatSessionMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionMemberRsp& operator=(GetChatSessionMemberRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatSessionMemberRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatSessionMemberRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionMemberRsp*>(
               &_GetChatSessionMemberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetChatSessionMemberRsp& a, GetChatSessionMemberRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionMemberRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionMemberRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatSessionMemberRsp* New() const final {
    return CreateMaybeMessage<GetChatSessionMemberRsp>(nullptr);
  }

  GetChatSessionMemberRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatSessionMemberRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatSessionMemberRsp& from);
  void MergeFrom(const GetChatSessionMemberRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionMemberRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetChatSessionMemberRsp";
  }
  protected:
  explicit GetChatSessionMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_2eproto);
    return ::descriptor_table_friend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberInfoListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .lbk.UserInfo member_info_list = 4;
  int member_info_list_size() const;
  private:
  int _internal_member_info_list_size() const;
  public:
  void clear_member_info_list();
  ::lbk::UserInfo* mutable_member_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >*
      mutable_member_info_list();
  private:
  const ::lbk::UserInfo& _internal_member_info_list(int index) const;
  ::lbk::UserInfo* _internal_add_member_info_list();
  public:
  const ::lbk::UserInfo& member_info_list(int index) const;
  ::lbk::UserInfo* add_member_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >&
      member_info_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetChatSessionMemberRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo > member_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_2eproto;
};
// ===================================================================

class FriendService_Stub;

class FriendService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendService() {};
 public:
  virtual ~FriendService();

  typedef FriendService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetFriendListReq* request,
                       ::lbk::GetFriendListRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendRemove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendRemoveReq* request,
                       ::lbk::FriendRemoveRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendAddReq* request,
                       ::lbk::FriendAddRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendAddProcess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendAddProcessReq* request,
                       ::lbk::FriendAddProcessRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendSearchReq* request,
                       ::lbk::FriendSearchRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChatSessionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetChatSessionListReq* request,
                       ::lbk::GetChatSessionListRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void ChatSessionCreate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::ChatSessionCreateReq* request,
                       ::lbk::ChatSessionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChatSessionMember(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetChatSessionMemberReq* request,
                       ::lbk::GetChatSessionMemberRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPendingFriendEventList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetPendingFriendEventListReq* request,
                       ::lbk::GetPendingFriendEventListRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendService);
};

class FriendService_Stub : public FriendService {
 public:
  FriendService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendService ------------------------------------------

  void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetFriendListReq* request,
                       ::lbk::GetFriendListRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendRemove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendRemoveReq* request,
                       ::lbk::FriendRemoveRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendAddReq* request,
                       ::lbk::FriendAddRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendAddProcess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendAddProcessReq* request,
                       ::lbk::FriendAddProcessRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::FriendSearchReq* request,
                       ::lbk::FriendSearchRsp* response,
                       ::google::protobuf::Closure* done);
  void GetChatSessionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetChatSessionListReq* request,
                       ::lbk::GetChatSessionListRsp* response,
                       ::google::protobuf::Closure* done);
  void ChatSessionCreate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::ChatSessionCreateReq* request,
                       ::lbk::ChatSessionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  void GetChatSessionMember(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetChatSessionMemberReq* request,
                       ::lbk::GetChatSessionMemberRsp* response,
                       ::google::protobuf::Closure* done);
  void GetPendingFriendEventList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetPendingFriendEventListReq* request,
                       ::lbk::GetPendingFriendEventListRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFriendListReq

// string request_id = 1;
inline void GetFriendListReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFriendListReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetFriendListReq.request_id)
  return _internal_request_id();
}
inline void GetFriendListReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetFriendListReq.request_id)
}
inline std::string* GetFriendListReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetFriendListReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetFriendListReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetFriendListReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFriendListReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetFriendListReq.request_id)
}
inline void GetFriendListReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetFriendListReq.request_id)
}
inline void GetFriendListReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetFriendListReq.request_id)
}
inline std::string* GetFriendListReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFriendListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetFriendListReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFriendListReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetFriendListReq.request_id)
}
inline std::string* GetFriendListReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetFriendListReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFriendListReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetFriendListReq.request_id)
}

// string user_id = 2;
inline bool GetFriendListReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetFriendListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetFriendListReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFriendListReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetFriendListReq.user_id)
  return _internal_user_id();
}
inline void GetFriendListReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetFriendListReq.user_id)
}
inline std::string* GetFriendListReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetFriendListReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& GetFriendListReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetFriendListReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFriendListReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetFriendListReq.user_id)
}
inline void GetFriendListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetFriendListReq.user_id)
}
inline void GetFriendListReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetFriendListReq.user_id)
}
inline std::string* GetFriendListReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFriendListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.GetFriendListReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFriendListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetFriendListReq.user_id)
}
inline std::string* GetFriendListReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetFriendListReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFriendListReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetFriendListReq.user_id)
}

// string session_id = 3;
inline bool GetFriendListReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetFriendListReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetFriendListReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetFriendListReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetFriendListReq.session_id)
  return _internal_session_id();
}
inline void GetFriendListReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetFriendListReq.session_id)
}
inline std::string* GetFriendListReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetFriendListReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetFriendListReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetFriendListReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFriendListReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetFriendListReq.session_id)
}
inline void GetFriendListReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetFriendListReq.session_id)
}
inline void GetFriendListReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetFriendListReq.session_id)
}
inline std::string* GetFriendListReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFriendListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.GetFriendListReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFriendListReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetFriendListReq.session_id)
}
inline std::string* GetFriendListReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetFriendListReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFriendListReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetFriendListReq.session_id)
}

// -------------------------------------------------------------------

// GetFriendListRsp

// string request_id = 1;
inline void GetFriendListRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFriendListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetFriendListRsp.request_id)
  return _internal_request_id();
}
inline void GetFriendListRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetFriendListRsp.request_id)
}
inline std::string* GetFriendListRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetFriendListRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetFriendListRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetFriendListRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFriendListRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetFriendListRsp.request_id)
}
inline void GetFriendListRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetFriendListRsp.request_id)
}
inline void GetFriendListRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetFriendListRsp.request_id)
}
inline std::string* GetFriendListRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFriendListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetFriendListRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFriendListRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetFriendListRsp.request_id)
}
inline std::string* GetFriendListRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetFriendListRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFriendListRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetFriendListRsp.request_id)
}

// bool success = 2;
inline void GetFriendListRsp::clear_success() {
  success_ = false;
}
inline bool GetFriendListRsp::_internal_success() const {
  return success_;
}
inline bool GetFriendListRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.GetFriendListRsp.success)
  return _internal_success();
}
inline void GetFriendListRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetFriendListRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.GetFriendListRsp.success)
}

// string errmsg = 3;
inline void GetFriendListRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetFriendListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.GetFriendListRsp.errmsg)
  return _internal_errmsg();
}
inline void GetFriendListRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.GetFriendListRsp.errmsg)
}
inline std::string* GetFriendListRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.GetFriendListRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& GetFriendListRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetFriendListRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetFriendListRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetFriendListRsp.errmsg)
}
inline void GetFriendListRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetFriendListRsp.errmsg)
}
inline void GetFriendListRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetFriendListRsp.errmsg)
}
inline std::string* GetFriendListRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetFriendListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.GetFriendListRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFriendListRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetFriendListRsp.errmsg)
}
inline std::string* GetFriendListRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetFriendListRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetFriendListRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetFriendListRsp.errmsg)
}

// repeated .lbk.UserInfo friend_list = 4;
inline int GetFriendListRsp::_internal_friend_list_size() const {
  return friend_list_.size();
}
inline int GetFriendListRsp::friend_list_size() const {
  return _internal_friend_list_size();
}
inline ::lbk::UserInfo* GetFriendListRsp::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:lbk.GetFriendListRsp.friend_list)
  return friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >*
GetFriendListRsp::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:lbk.GetFriendListRsp.friend_list)
  return &friend_list_;
}
inline const ::lbk::UserInfo& GetFriendListRsp::_internal_friend_list(int index) const {
  return friend_list_.Get(index);
}
inline const ::lbk::UserInfo& GetFriendListRsp::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:lbk.GetFriendListRsp.friend_list)
  return _internal_friend_list(index);
}
inline ::lbk::UserInfo* GetFriendListRsp::_internal_add_friend_list() {
  return friend_list_.Add();
}
inline ::lbk::UserInfo* GetFriendListRsp::add_friend_list() {
  // @@protoc_insertion_point(field_add:lbk.GetFriendListRsp.friend_list)
  return _internal_add_friend_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >&
GetFriendListRsp::friend_list() const {
  // @@protoc_insertion_point(field_list:lbk.GetFriendListRsp.friend_list)
  return friend_list_;
}

// -------------------------------------------------------------------

// FriendRemoveReq

// string request_id = 1;
inline void FriendRemoveReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRemoveReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendRemoveReq.request_id)
  return _internal_request_id();
}
inline void FriendRemoveReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendRemoveReq.request_id)
}
inline std::string* FriendRemoveReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendRemoveReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendRemoveReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendRemoveReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRemoveReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendRemoveReq.request_id)
}
inline void FriendRemoveReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendRemoveReq.request_id)
}
inline void FriendRemoveReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendRemoveReq.request_id)
}
inline std::string* FriendRemoveReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRemoveReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendRemoveReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRemoveReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendRemoveReq.request_id)
}
inline std::string* FriendRemoveReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendRemoveReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendRemoveReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendRemoveReq.request_id)
}

// string user_id = 2;
inline bool FriendRemoveReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendRemoveReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendRemoveReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendRemoveReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendRemoveReq.user_id)
  return _internal_user_id();
}
inline void FriendRemoveReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendRemoveReq.user_id)
}
inline std::string* FriendRemoveReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendRemoveReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& FriendRemoveReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void FriendRemoveReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRemoveReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendRemoveReq.user_id)
}
inline void FriendRemoveReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendRemoveReq.user_id)
}
inline void FriendRemoveReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendRemoveReq.user_id)
}
inline std::string* FriendRemoveReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRemoveReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendRemoveReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRemoveReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendRemoveReq.user_id)
}
inline std::string* FriendRemoveReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendRemoveReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendRemoveReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendRemoveReq.user_id)
}

// string session_id = 3;
inline bool FriendRemoveReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendRemoveReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendRemoveReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendRemoveReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendRemoveReq.session_id)
  return _internal_session_id();
}
inline void FriendRemoveReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendRemoveReq.session_id)
}
inline std::string* FriendRemoveReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendRemoveReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& FriendRemoveReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void FriendRemoveReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRemoveReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendRemoveReq.session_id)
}
inline void FriendRemoveReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendRemoveReq.session_id)
}
inline void FriendRemoveReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendRemoveReq.session_id)
}
inline std::string* FriendRemoveReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRemoveReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendRemoveReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRemoveReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendRemoveReq.session_id)
}
inline std::string* FriendRemoveReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendRemoveReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendRemoveReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendRemoveReq.session_id)
}

// string peer_id = 4;
inline void FriendRemoveReq::clear_peer_id() {
  peer_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRemoveReq::peer_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendRemoveReq.peer_id)
  return _internal_peer_id();
}
inline void FriendRemoveReq::set_peer_id(const std::string& value) {
  _internal_set_peer_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendRemoveReq.peer_id)
}
inline std::string* FriendRemoveReq::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendRemoveReq.peer_id)
  return _internal_mutable_peer_id();
}
inline const std::string& FriendRemoveReq::_internal_peer_id() const {
  return peer_id_.Get();
}
inline void FriendRemoveReq::_internal_set_peer_id(const std::string& value) {
  
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRemoveReq::set_peer_id(std::string&& value) {
  
  peer_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendRemoveReq.peer_id)
}
inline void FriendRemoveReq::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendRemoveReq.peer_id)
}
inline void FriendRemoveReq::set_peer_id(const char* value,
    size_t size) {
  
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendRemoveReq.peer_id)
}
inline std::string* FriendRemoveReq::_internal_mutable_peer_id() {
  
  return peer_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRemoveReq::release_peer_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendRemoveReq.peer_id)
  return peer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRemoveReq::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    
  } else {
    
  }
  peer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendRemoveReq.peer_id)
}
inline std::string* FriendRemoveReq::unsafe_arena_release_peer_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendRemoveReq.peer_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return peer_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendRemoveReq::unsafe_arena_set_allocated_peer_id(
    std::string* peer_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (peer_id != nullptr) {
    
  } else {
    
  }
  peer_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      peer_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendRemoveReq.peer_id)
}

// -------------------------------------------------------------------

// FriendRemoveRsp

// string request_id = 1;
inline void FriendRemoveRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRemoveRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendRemoveRsp.request_id)
  return _internal_request_id();
}
inline void FriendRemoveRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendRemoveRsp.request_id)
}
inline std::string* FriendRemoveRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendRemoveRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendRemoveRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendRemoveRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRemoveRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendRemoveRsp.request_id)
}
inline void FriendRemoveRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendRemoveRsp.request_id)
}
inline void FriendRemoveRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendRemoveRsp.request_id)
}
inline std::string* FriendRemoveRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRemoveRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendRemoveRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRemoveRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendRemoveRsp.request_id)
}
inline std::string* FriendRemoveRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendRemoveRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendRemoveRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendRemoveRsp.request_id)
}

// bool success = 2;
inline void FriendRemoveRsp::clear_success() {
  success_ = false;
}
inline bool FriendRemoveRsp::_internal_success() const {
  return success_;
}
inline bool FriendRemoveRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.FriendRemoveRsp.success)
  return _internal_success();
}
inline void FriendRemoveRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void FriendRemoveRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.FriendRemoveRsp.success)
}

// string errmsg = 3;
inline void FriendRemoveRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendRemoveRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.FriendRemoveRsp.errmsg)
  return _internal_errmsg();
}
inline void FriendRemoveRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.FriendRemoveRsp.errmsg)
}
inline std::string* FriendRemoveRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendRemoveRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& FriendRemoveRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void FriendRemoveRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendRemoveRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendRemoveRsp.errmsg)
}
inline void FriendRemoveRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendRemoveRsp.errmsg)
}
inline void FriendRemoveRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendRemoveRsp.errmsg)
}
inline std::string* FriendRemoveRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendRemoveRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.FriendRemoveRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRemoveRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendRemoveRsp.errmsg)
}
inline std::string* FriendRemoveRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendRemoveRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendRemoveRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendRemoveRsp.errmsg)
}

// -------------------------------------------------------------------

// FriendAddReq

// string request_id = 1;
inline void FriendAddReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddReq.request_id)
  return _internal_request_id();
}
inline void FriendAddReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddReq.request_id)
}
inline std::string* FriendAddReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendAddReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendAddReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddReq.request_id)
}
inline void FriendAddReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddReq.request_id)
}
inline void FriendAddReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddReq.request_id)
}
inline std::string* FriendAddReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddReq.request_id)
}
inline std::string* FriendAddReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddReq.request_id)
}

// string session_id = 2;
inline bool FriendAddReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendAddReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendAddReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendAddReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddReq.session_id)
  return _internal_session_id();
}
inline void FriendAddReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddReq.session_id)
}
inline std::string* FriendAddReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& FriendAddReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void FriendAddReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddReq.session_id)
}
inline void FriendAddReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddReq.session_id)
}
inline void FriendAddReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddReq.session_id)
}
inline std::string* FriendAddReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddReq.session_id)
}
inline std::string* FriendAddReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddReq.session_id)
}

// string user_id = 3;
inline bool FriendAddReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendAddReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendAddReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendAddReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddReq.user_id)
  return _internal_user_id();
}
inline void FriendAddReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddReq.user_id)
}
inline std::string* FriendAddReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& FriendAddReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void FriendAddReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddReq.user_id)
}
inline void FriendAddReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddReq.user_id)
}
inline void FriendAddReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddReq.user_id)
}
inline std::string* FriendAddReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000002u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddReq.user_id)
}
inline std::string* FriendAddReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddReq.user_id)
}

// string respondent_id = 4;
inline void FriendAddReq::clear_respondent_id() {
  respondent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddReq::respondent_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddReq.respondent_id)
  return _internal_respondent_id();
}
inline void FriendAddReq::set_respondent_id(const std::string& value) {
  _internal_set_respondent_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddReq.respondent_id)
}
inline std::string* FriendAddReq::mutable_respondent_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddReq.respondent_id)
  return _internal_mutable_respondent_id();
}
inline const std::string& FriendAddReq::_internal_respondent_id() const {
  return respondent_id_.Get();
}
inline void FriendAddReq::_internal_set_respondent_id(const std::string& value) {
  
  respondent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddReq::set_respondent_id(std::string&& value) {
  
  respondent_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddReq.respondent_id)
}
inline void FriendAddReq::set_respondent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  respondent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddReq.respondent_id)
}
inline void FriendAddReq::set_respondent_id(const char* value,
    size_t size) {
  
  respondent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddReq.respondent_id)
}
inline std::string* FriendAddReq::_internal_mutable_respondent_id() {
  
  return respondent_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddReq::release_respondent_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddReq.respondent_id)
  return respondent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddReq::set_allocated_respondent_id(std::string* respondent_id) {
  if (respondent_id != nullptr) {
    
  } else {
    
  }
  respondent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), respondent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddReq.respondent_id)
}
inline std::string* FriendAddReq::unsafe_arena_release_respondent_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddReq.respondent_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return respondent_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddReq::unsafe_arena_set_allocated_respondent_id(
    std::string* respondent_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (respondent_id != nullptr) {
    
  } else {
    
  }
  respondent_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      respondent_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddReq.respondent_id)
}

// -------------------------------------------------------------------

// FriendAddRsp

// string request_id = 1;
inline void FriendAddRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddRsp.request_id)
  return _internal_request_id();
}
inline void FriendAddRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddRsp.request_id)
}
inline std::string* FriendAddRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendAddRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendAddRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddRsp.request_id)
}
inline void FriendAddRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddRsp.request_id)
}
inline void FriendAddRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddRsp.request_id)
}
inline std::string* FriendAddRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddRsp.request_id)
}
inline std::string* FriendAddRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddRsp.request_id)
}

// bool success = 2;
inline void FriendAddRsp::clear_success() {
  success_ = false;
}
inline bool FriendAddRsp::_internal_success() const {
  return success_;
}
inline bool FriendAddRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddRsp.success)
  return _internal_success();
}
inline void FriendAddRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void FriendAddRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddRsp.success)
}

// string errmsg = 3;
inline void FriendAddRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddRsp.errmsg)
  return _internal_errmsg();
}
inline void FriendAddRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddRsp.errmsg)
}
inline std::string* FriendAddRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& FriendAddRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void FriendAddRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddRsp.errmsg)
}
inline void FriendAddRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddRsp.errmsg)
}
inline void FriendAddRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddRsp.errmsg)
}
inline std::string* FriendAddRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddRsp.errmsg)
}
inline std::string* FriendAddRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddRsp.errmsg)
}

// string notify_event_id = 4;
inline bool FriendAddRsp::_internal_has_notify_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendAddRsp::has_notify_event_id() const {
  return _internal_has_notify_event_id();
}
inline void FriendAddRsp::clear_notify_event_id() {
  notify_event_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendAddRsp::notify_event_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddRsp.notify_event_id)
  return _internal_notify_event_id();
}
inline void FriendAddRsp::set_notify_event_id(const std::string& value) {
  _internal_set_notify_event_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddRsp.notify_event_id)
}
inline std::string* FriendAddRsp::mutable_notify_event_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddRsp.notify_event_id)
  return _internal_mutable_notify_event_id();
}
inline const std::string& FriendAddRsp::_internal_notify_event_id() const {
  return notify_event_id_.Get();
}
inline void FriendAddRsp::_internal_set_notify_event_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddRsp::set_notify_event_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddRsp.notify_event_id)
}
inline void FriendAddRsp::set_notify_event_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddRsp.notify_event_id)
}
inline void FriendAddRsp::set_notify_event_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddRsp.notify_event_id)
}
inline std::string* FriendAddRsp::_internal_mutable_notify_event_id() {
  _has_bits_[0] |= 0x00000001u;
  return notify_event_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddRsp::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddRsp.notify_event_id)
  if (!_internal_has_notify_event_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notify_event_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddRsp::set_allocated_notify_event_id(std::string* notify_event_id) {
  if (notify_event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notify_event_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notify_event_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddRsp.notify_event_id)
}
inline std::string* FriendAddRsp::unsafe_arena_release_notify_event_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddRsp.notify_event_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return notify_event_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddRsp::unsafe_arena_set_allocated_notify_event_id(
    std::string* notify_event_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (notify_event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notify_event_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      notify_event_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddRsp.notify_event_id)
}

// -------------------------------------------------------------------

// FriendAddProcessReq

// string request_id = 1;
inline void FriendAddProcessReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddProcessReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessReq.request_id)
  return _internal_request_id();
}
inline void FriendAddProcessReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessReq.request_id)
}
inline std::string* FriendAddProcessReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendAddProcessReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessReq.request_id)
}
inline void FriendAddProcessReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessReq.request_id)
}
inline void FriendAddProcessReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessReq.request_id)
}
inline std::string* FriendAddProcessReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessReq.request_id)
}
inline std::string* FriendAddProcessReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessReq.request_id)
}

// string notify_event_id = 2;
inline bool FriendAddProcessReq::_internal_has_notify_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendAddProcessReq::has_notify_event_id() const {
  return _internal_has_notify_event_id();
}
inline void FriendAddProcessReq::clear_notify_event_id() {
  notify_event_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendAddProcessReq::notify_event_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessReq.notify_event_id)
  return _internal_notify_event_id();
}
inline void FriendAddProcessReq::set_notify_event_id(const std::string& value) {
  _internal_set_notify_event_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessReq.notify_event_id)
}
inline std::string* FriendAddProcessReq::mutable_notify_event_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessReq.notify_event_id)
  return _internal_mutable_notify_event_id();
}
inline const std::string& FriendAddProcessReq::_internal_notify_event_id() const {
  return notify_event_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_notify_event_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessReq::set_notify_event_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessReq.notify_event_id)
}
inline void FriendAddProcessReq::set_notify_event_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessReq.notify_event_id)
}
inline void FriendAddProcessReq::set_notify_event_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  notify_event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessReq.notify_event_id)
}
inline std::string* FriendAddProcessReq::_internal_mutable_notify_event_id() {
  _has_bits_[0] |= 0x00000001u;
  return notify_event_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessReq::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessReq.notify_event_id)
  if (!_internal_has_notify_event_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notify_event_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessReq::set_allocated_notify_event_id(std::string* notify_event_id) {
  if (notify_event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notify_event_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notify_event_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessReq.notify_event_id)
}
inline std::string* FriendAddProcessReq::unsafe_arena_release_notify_event_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessReq.notify_event_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return notify_event_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessReq::unsafe_arena_set_allocated_notify_event_id(
    std::string* notify_event_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (notify_event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notify_event_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      notify_event_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessReq.notify_event_id)
}

// bool agree = 3;
inline void FriendAddProcessReq::clear_agree() {
  agree_ = false;
}
inline bool FriendAddProcessReq::_internal_agree() const {
  return agree_;
}
inline bool FriendAddProcessReq::agree() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessReq.agree)
  return _internal_agree();
}
inline void FriendAddProcessReq::_internal_set_agree(bool value) {
  
  agree_ = value;
}
inline void FriendAddProcessReq::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessReq.agree)
}

// string apply_user_id = 4;
inline void FriendAddProcessReq::clear_apply_user_id() {
  apply_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddProcessReq::apply_user_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessReq.apply_user_id)
  return _internal_apply_user_id();
}
inline void FriendAddProcessReq::set_apply_user_id(const std::string& value) {
  _internal_set_apply_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessReq.apply_user_id)
}
inline std::string* FriendAddProcessReq::mutable_apply_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessReq.apply_user_id)
  return _internal_mutable_apply_user_id();
}
inline const std::string& FriendAddProcessReq::_internal_apply_user_id() const {
  return apply_user_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_apply_user_id(const std::string& value) {
  
  apply_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessReq::set_apply_user_id(std::string&& value) {
  
  apply_user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessReq.apply_user_id)
}
inline void FriendAddProcessReq::set_apply_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apply_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessReq.apply_user_id)
}
inline void FriendAddProcessReq::set_apply_user_id(const char* value,
    size_t size) {
  
  apply_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessReq.apply_user_id)
}
inline std::string* FriendAddProcessReq::_internal_mutable_apply_user_id() {
  
  return apply_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessReq::release_apply_user_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessReq.apply_user_id)
  return apply_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessReq::set_allocated_apply_user_id(std::string* apply_user_id) {
  if (apply_user_id != nullptr) {
    
  } else {
    
  }
  apply_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apply_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessReq.apply_user_id)
}
inline std::string* FriendAddProcessReq::unsafe_arena_release_apply_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessReq.apply_user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return apply_user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessReq::unsafe_arena_set_allocated_apply_user_id(
    std::string* apply_user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (apply_user_id != nullptr) {
    
  } else {
    
  }
  apply_user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      apply_user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessReq.apply_user_id)
}

// string session_id = 5;
inline bool FriendAddProcessReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendAddProcessReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendAddProcessReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendAddProcessReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessReq.session_id)
  return _internal_session_id();
}
inline void FriendAddProcessReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessReq.session_id)
}
inline std::string* FriendAddProcessReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& FriendAddProcessReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessReq.session_id)
}
inline void FriendAddProcessReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessReq.session_id)
}
inline void FriendAddProcessReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessReq.session_id)
}
inline std::string* FriendAddProcessReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessReq.session_id)
}
inline std::string* FriendAddProcessReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessReq.session_id)
}

// string user_id = 6;
inline bool FriendAddProcessReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FriendAddProcessReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendAddProcessReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FriendAddProcessReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessReq.user_id)
  return _internal_user_id();
}
inline void FriendAddProcessReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessReq.user_id)
}
inline std::string* FriendAddProcessReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& FriendAddProcessReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessReq.user_id)
}
inline void FriendAddProcessReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessReq.user_id)
}
inline void FriendAddProcessReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessReq.user_id)
}
inline std::string* FriendAddProcessReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000004u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessReq.user_id)
}
inline std::string* FriendAddProcessReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessReq.user_id)
}

// -------------------------------------------------------------------

// FriendAddProcessRsp

// string request_id = 1;
inline void FriendAddProcessRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddProcessRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessRsp.request_id)
  return _internal_request_id();
}
inline void FriendAddProcessRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessRsp.request_id)
}
inline std::string* FriendAddProcessRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendAddProcessRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendAddProcessRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessRsp.request_id)
}
inline void FriendAddProcessRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessRsp.request_id)
}
inline void FriendAddProcessRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessRsp.request_id)
}
inline std::string* FriendAddProcessRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessRsp.request_id)
}
inline std::string* FriendAddProcessRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessRsp.request_id)
}

// bool success = 2;
inline void FriendAddProcessRsp::clear_success() {
  success_ = false;
}
inline bool FriendAddProcessRsp::_internal_success() const {
  return success_;
}
inline bool FriendAddProcessRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessRsp.success)
  return _internal_success();
}
inline void FriendAddProcessRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void FriendAddProcessRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessRsp.success)
}

// string errmsg = 3;
inline void FriendAddProcessRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendAddProcessRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessRsp.errmsg)
  return _internal_errmsg();
}
inline void FriendAddProcessRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessRsp.errmsg)
}
inline std::string* FriendAddProcessRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& FriendAddProcessRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void FriendAddProcessRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessRsp.errmsg)
}
inline void FriendAddProcessRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessRsp.errmsg)
}
inline void FriendAddProcessRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessRsp.errmsg)
}
inline std::string* FriendAddProcessRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessRsp.errmsg)
}
inline std::string* FriendAddProcessRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessRsp.errmsg)
}

// string new_session_id = 4;
inline bool FriendAddProcessRsp::_internal_has_new_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendAddProcessRsp::has_new_session_id() const {
  return _internal_has_new_session_id();
}
inline void FriendAddProcessRsp::clear_new_session_id() {
  new_session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendAddProcessRsp::new_session_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendAddProcessRsp.new_session_id)
  return _internal_new_session_id();
}
inline void FriendAddProcessRsp::set_new_session_id(const std::string& value) {
  _internal_set_new_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendAddProcessRsp.new_session_id)
}
inline std::string* FriendAddProcessRsp::mutable_new_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendAddProcessRsp.new_session_id)
  return _internal_mutable_new_session_id();
}
inline const std::string& FriendAddProcessRsp::_internal_new_session_id() const {
  return new_session_id_.Get();
}
inline void FriendAddProcessRsp::_internal_set_new_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  new_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendAddProcessRsp::set_new_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  new_session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendAddProcessRsp.new_session_id)
}
inline void FriendAddProcessRsp::set_new_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  new_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendAddProcessRsp.new_session_id)
}
inline void FriendAddProcessRsp::set_new_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  new_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendAddProcessRsp.new_session_id)
}
inline std::string* FriendAddProcessRsp::_internal_mutable_new_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return new_session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendAddProcessRsp::release_new_session_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendAddProcessRsp.new_session_id)
  if (!_internal_has_new_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return new_session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendAddProcessRsp::set_allocated_new_session_id(std::string* new_session_id) {
  if (new_session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  new_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendAddProcessRsp.new_session_id)
}
inline std::string* FriendAddProcessRsp::unsafe_arena_release_new_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendAddProcessRsp.new_session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return new_session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendAddProcessRsp::unsafe_arena_set_allocated_new_session_id(
    std::string* new_session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  new_session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendAddProcessRsp.new_session_id)
}

// -------------------------------------------------------------------

// GetPendingFriendEventListReq

// string request_id = 1;
inline void GetPendingFriendEventListReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPendingFriendEventListReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetPendingFriendEventListReq.request_id)
  return _internal_request_id();
}
inline void GetPendingFriendEventListReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetPendingFriendEventListReq.request_id)
}
inline std::string* GetPendingFriendEventListReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetPendingFriendEventListReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetPendingFriendEventListReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetPendingFriendEventListReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPendingFriendEventListReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetPendingFriendEventListReq.request_id)
}
inline void GetPendingFriendEventListReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetPendingFriendEventListReq.request_id)
}
inline void GetPendingFriendEventListReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetPendingFriendEventListReq.request_id)
}
inline std::string* GetPendingFriendEventListReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPendingFriendEventListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetPendingFriendEventListReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPendingFriendEventListReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetPendingFriendEventListReq.request_id)
}
inline std::string* GetPendingFriendEventListReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetPendingFriendEventListReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPendingFriendEventListReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetPendingFriendEventListReq.request_id)
}

// string session_id = 2;
inline bool GetPendingFriendEventListReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPendingFriendEventListReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetPendingFriendEventListReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPendingFriendEventListReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetPendingFriendEventListReq.session_id)
  return _internal_session_id();
}
inline void GetPendingFriendEventListReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetPendingFriendEventListReq.session_id)
}
inline std::string* GetPendingFriendEventListReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetPendingFriendEventListReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetPendingFriendEventListReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetPendingFriendEventListReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPendingFriendEventListReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetPendingFriendEventListReq.session_id)
}
inline void GetPendingFriendEventListReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetPendingFriendEventListReq.session_id)
}
inline void GetPendingFriendEventListReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetPendingFriendEventListReq.session_id)
}
inline std::string* GetPendingFriendEventListReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPendingFriendEventListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.GetPendingFriendEventListReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPendingFriendEventListReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetPendingFriendEventListReq.session_id)
}
inline std::string* GetPendingFriendEventListReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetPendingFriendEventListReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPendingFriendEventListReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetPendingFriendEventListReq.session_id)
}

// string user_id = 3;
inline bool GetPendingFriendEventListReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPendingFriendEventListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetPendingFriendEventListReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetPendingFriendEventListReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetPendingFriendEventListReq.user_id)
  return _internal_user_id();
}
inline void GetPendingFriendEventListReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetPendingFriendEventListReq.user_id)
}
inline std::string* GetPendingFriendEventListReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetPendingFriendEventListReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& GetPendingFriendEventListReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetPendingFriendEventListReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPendingFriendEventListReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetPendingFriendEventListReq.user_id)
}
inline void GetPendingFriendEventListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetPendingFriendEventListReq.user_id)
}
inline void GetPendingFriendEventListReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetPendingFriendEventListReq.user_id)
}
inline std::string* GetPendingFriendEventListReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000002u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPendingFriendEventListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.GetPendingFriendEventListReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPendingFriendEventListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetPendingFriendEventListReq.user_id)
}
inline std::string* GetPendingFriendEventListReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetPendingFriendEventListReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPendingFriendEventListReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetPendingFriendEventListReq.user_id)
}

// -------------------------------------------------------------------

// FriendEvent

// string event_id = 1;
inline bool FriendEvent::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendEvent::has_event_id() const {
  return _internal_has_event_id();
}
inline void FriendEvent::clear_event_id() {
  event_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendEvent::event_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendEvent.event_id)
  return _internal_event_id();
}
inline void FriendEvent::set_event_id(const std::string& value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendEvent.event_id)
}
inline std::string* FriendEvent::mutable_event_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendEvent.event_id)
  return _internal_mutable_event_id();
}
inline const std::string& FriendEvent::_internal_event_id() const {
  return event_id_.Get();
}
inline void FriendEvent::_internal_set_event_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendEvent::set_event_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendEvent.event_id)
}
inline void FriendEvent::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendEvent.event_id)
}
inline void FriendEvent::set_event_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendEvent.event_id)
}
inline std::string* FriendEvent::_internal_mutable_event_id() {
  _has_bits_[0] |= 0x00000001u;
  return event_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendEvent.event_id)
  if (!_internal_has_event_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendEvent::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendEvent.event_id)
}
inline std::string* FriendEvent::unsafe_arena_release_event_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendEvent.event_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return event_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendEvent::unsafe_arena_set_allocated_event_id(
    std::string* event_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      event_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendEvent.event_id)
}

// .lbk.UserInfo sender = 3;
inline bool FriendEvent::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool FriendEvent::has_sender() const {
  return _internal_has_sender();
}
inline const ::lbk::UserInfo& FriendEvent::_internal_sender() const {
  const ::lbk::UserInfo* p = sender_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lbk::UserInfo*>(
      &::lbk::_UserInfo_default_instance_);
}
inline const ::lbk::UserInfo& FriendEvent::sender() const {
  // @@protoc_insertion_point(field_get:lbk.FriendEvent.sender)
  return _internal_sender();
}
inline void FriendEvent::unsafe_arena_set_allocated_sender(
    ::lbk::UserInfo* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendEvent.sender)
}
inline ::lbk::UserInfo* FriendEvent::release_sender() {
  auto temp = unsafe_arena_release_sender();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lbk::UserInfo* FriendEvent::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:lbk.FriendEvent.sender)
  
  ::lbk::UserInfo* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::lbk::UserInfo* FriendEvent::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::lbk::UserInfo>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::lbk::UserInfo* FriendEvent::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendEvent.sender)
  return _internal_mutable_sender();
}
inline void FriendEvent::set_allocated_sender(::lbk::UserInfo* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender)->GetArena();
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendEvent.sender)
}

// -------------------------------------------------------------------

// GetPendingFriendEventListRsp

// string request_id = 1;
inline void GetPendingFriendEventListRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPendingFriendEventListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetPendingFriendEventListRsp.request_id)
  return _internal_request_id();
}
inline void GetPendingFriendEventListRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetPendingFriendEventListRsp.request_id)
}
inline std::string* GetPendingFriendEventListRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetPendingFriendEventListRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetPendingFriendEventListRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetPendingFriendEventListRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPendingFriendEventListRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetPendingFriendEventListRsp.request_id)
}
inline void GetPendingFriendEventListRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetPendingFriendEventListRsp.request_id)
}
inline void GetPendingFriendEventListRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetPendingFriendEventListRsp.request_id)
}
inline std::string* GetPendingFriendEventListRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPendingFriendEventListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetPendingFriendEventListRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPendingFriendEventListRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetPendingFriendEventListRsp.request_id)
}
inline std::string* GetPendingFriendEventListRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetPendingFriendEventListRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPendingFriendEventListRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetPendingFriendEventListRsp.request_id)
}

// bool success = 2;
inline void GetPendingFriendEventListRsp::clear_success() {
  success_ = false;
}
inline bool GetPendingFriendEventListRsp::_internal_success() const {
  return success_;
}
inline bool GetPendingFriendEventListRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.GetPendingFriendEventListRsp.success)
  return _internal_success();
}
inline void GetPendingFriendEventListRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetPendingFriendEventListRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.GetPendingFriendEventListRsp.success)
}

// string errmsg = 3;
inline void GetPendingFriendEventListRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPendingFriendEventListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.GetPendingFriendEventListRsp.errmsg)
  return _internal_errmsg();
}
inline void GetPendingFriendEventListRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.GetPendingFriendEventListRsp.errmsg)
}
inline std::string* GetPendingFriendEventListRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.GetPendingFriendEventListRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& GetPendingFriendEventListRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetPendingFriendEventListRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPendingFriendEventListRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetPendingFriendEventListRsp.errmsg)
}
inline void GetPendingFriendEventListRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetPendingFriendEventListRsp.errmsg)
}
inline void GetPendingFriendEventListRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetPendingFriendEventListRsp.errmsg)
}
inline std::string* GetPendingFriendEventListRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPendingFriendEventListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.GetPendingFriendEventListRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPendingFriendEventListRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetPendingFriendEventListRsp.errmsg)
}
inline std::string* GetPendingFriendEventListRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetPendingFriendEventListRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPendingFriendEventListRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetPendingFriendEventListRsp.errmsg)
}

// repeated .lbk.FriendEvent event = 4;
inline int GetPendingFriendEventListRsp::_internal_event_size() const {
  return event_.size();
}
inline int GetPendingFriendEventListRsp::event_size() const {
  return _internal_event_size();
}
inline void GetPendingFriendEventListRsp::clear_event() {
  event_.Clear();
}
inline ::lbk::FriendEvent* GetPendingFriendEventListRsp::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:lbk.GetPendingFriendEventListRsp.event)
  return event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::FriendEvent >*
GetPendingFriendEventListRsp::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:lbk.GetPendingFriendEventListRsp.event)
  return &event_;
}
inline const ::lbk::FriendEvent& GetPendingFriendEventListRsp::_internal_event(int index) const {
  return event_.Get(index);
}
inline const ::lbk::FriendEvent& GetPendingFriendEventListRsp::event(int index) const {
  // @@protoc_insertion_point(field_get:lbk.GetPendingFriendEventListRsp.event)
  return _internal_event(index);
}
inline ::lbk::FriendEvent* GetPendingFriendEventListRsp::_internal_add_event() {
  return event_.Add();
}
inline ::lbk::FriendEvent* GetPendingFriendEventListRsp::add_event() {
  // @@protoc_insertion_point(field_add:lbk.GetPendingFriendEventListRsp.event)
  return _internal_add_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::FriendEvent >&
GetPendingFriendEventListRsp::event() const {
  // @@protoc_insertion_point(field_list:lbk.GetPendingFriendEventListRsp.event)
  return event_;
}

// -------------------------------------------------------------------

// FriendSearchReq

// string request_id = 1;
inline void FriendSearchReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendSearchReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchReq.request_id)
  return _internal_request_id();
}
inline void FriendSearchReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendSearchReq.request_id)
}
inline std::string* FriendSearchReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendSearchReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendSearchReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendSearchReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendSearchReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendSearchReq.request_id)
}
inline void FriendSearchReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendSearchReq.request_id)
}
inline void FriendSearchReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendSearchReq.request_id)
}
inline std::string* FriendSearchReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendSearchReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendSearchReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendSearchReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendSearchReq.request_id)
}
inline std::string* FriendSearchReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendSearchReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendSearchReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendSearchReq.request_id)
}

// string search_key = 2;
inline void FriendSearchReq::clear_search_key() {
  search_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendSearchReq::search_key() const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchReq.search_key)
  return _internal_search_key();
}
inline void FriendSearchReq::set_search_key(const std::string& value) {
  _internal_set_search_key(value);
  // @@protoc_insertion_point(field_set:lbk.FriendSearchReq.search_key)
}
inline std::string* FriendSearchReq::mutable_search_key() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendSearchReq.search_key)
  return _internal_mutable_search_key();
}
inline const std::string& FriendSearchReq::_internal_search_key() const {
  return search_key_.Get();
}
inline void FriendSearchReq::_internal_set_search_key(const std::string& value) {
  
  search_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendSearchReq::set_search_key(std::string&& value) {
  
  search_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendSearchReq.search_key)
}
inline void FriendSearchReq::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendSearchReq.search_key)
}
inline void FriendSearchReq::set_search_key(const char* value,
    size_t size) {
  
  search_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendSearchReq.search_key)
}
inline std::string* FriendSearchReq::_internal_mutable_search_key() {
  
  return search_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendSearchReq::release_search_key() {
  // @@protoc_insertion_point(field_release:lbk.FriendSearchReq.search_key)
  return search_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendSearchReq::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    
  } else {
    
  }
  search_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendSearchReq.search_key)
}
inline std::string* FriendSearchReq::unsafe_arena_release_search_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendSearchReq.search_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return search_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendSearchReq::unsafe_arena_set_allocated_search_key(
    std::string* search_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (search_key != nullptr) {
    
  } else {
    
  }
  search_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      search_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendSearchReq.search_key)
}

// string session_id = 3;
inline bool FriendSearchReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendSearchReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendSearchReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendSearchReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchReq.session_id)
  return _internal_session_id();
}
inline void FriendSearchReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendSearchReq.session_id)
}
inline std::string* FriendSearchReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendSearchReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& FriendSearchReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void FriendSearchReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendSearchReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendSearchReq.session_id)
}
inline void FriendSearchReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendSearchReq.session_id)
}
inline void FriendSearchReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendSearchReq.session_id)
}
inline std::string* FriendSearchReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendSearchReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendSearchReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendSearchReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendSearchReq.session_id)
}
inline std::string* FriendSearchReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendSearchReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendSearchReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendSearchReq.session_id)
}

// string user_id = 4;
inline bool FriendSearchReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendSearchReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendSearchReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendSearchReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchReq.user_id)
  return _internal_user_id();
}
inline void FriendSearchReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendSearchReq.user_id)
}
inline std::string* FriendSearchReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendSearchReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& FriendSearchReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void FriendSearchReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendSearchReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendSearchReq.user_id)
}
inline void FriendSearchReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendSearchReq.user_id)
}
inline void FriendSearchReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendSearchReq.user_id)
}
inline std::string* FriendSearchReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000002u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendSearchReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendSearchReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendSearchReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendSearchReq.user_id)
}
inline std::string* FriendSearchReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendSearchReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendSearchReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendSearchReq.user_id)
}

// -------------------------------------------------------------------

// FriendSearchRsp

// string request_id = 1;
inline void FriendSearchRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendSearchRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchRsp.request_id)
  return _internal_request_id();
}
inline void FriendSearchRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.FriendSearchRsp.request_id)
}
inline std::string* FriendSearchRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendSearchRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FriendSearchRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void FriendSearchRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendSearchRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendSearchRsp.request_id)
}
inline void FriendSearchRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendSearchRsp.request_id)
}
inline void FriendSearchRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendSearchRsp.request_id)
}
inline std::string* FriendSearchRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendSearchRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.FriendSearchRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendSearchRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendSearchRsp.request_id)
}
inline std::string* FriendSearchRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendSearchRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendSearchRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendSearchRsp.request_id)
}

// bool success = 2;
inline void FriendSearchRsp::clear_success() {
  success_ = false;
}
inline bool FriendSearchRsp::_internal_success() const {
  return success_;
}
inline bool FriendSearchRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchRsp.success)
  return _internal_success();
}
inline void FriendSearchRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void FriendSearchRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.FriendSearchRsp.success)
}

// string errmsg = 3;
inline void FriendSearchRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendSearchRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchRsp.errmsg)
  return _internal_errmsg();
}
inline void FriendSearchRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.FriendSearchRsp.errmsg)
}
inline std::string* FriendSearchRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.FriendSearchRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& FriendSearchRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void FriendSearchRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendSearchRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.FriendSearchRsp.errmsg)
}
inline void FriendSearchRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.FriendSearchRsp.errmsg)
}
inline void FriendSearchRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.FriendSearchRsp.errmsg)
}
inline std::string* FriendSearchRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendSearchRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.FriendSearchRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendSearchRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.FriendSearchRsp.errmsg)
}
inline std::string* FriendSearchRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.FriendSearchRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendSearchRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.FriendSearchRsp.errmsg)
}

// repeated .lbk.UserInfo user_info = 4;
inline int FriendSearchRsp::_internal_user_info_size() const {
  return user_info_.size();
}
inline int FriendSearchRsp::user_info_size() const {
  return _internal_user_info_size();
}
inline ::lbk::UserInfo* FriendSearchRsp::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:lbk.FriendSearchRsp.user_info)
  return user_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >*
FriendSearchRsp::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:lbk.FriendSearchRsp.user_info)
  return &user_info_;
}
inline const ::lbk::UserInfo& FriendSearchRsp::_internal_user_info(int index) const {
  return user_info_.Get(index);
}
inline const ::lbk::UserInfo& FriendSearchRsp::user_info(int index) const {
  // @@protoc_insertion_point(field_get:lbk.FriendSearchRsp.user_info)
  return _internal_user_info(index);
}
inline ::lbk::UserInfo* FriendSearchRsp::_internal_add_user_info() {
  return user_info_.Add();
}
inline ::lbk::UserInfo* FriendSearchRsp::add_user_info() {
  // @@protoc_insertion_point(field_add:lbk.FriendSearchRsp.user_info)
  return _internal_add_user_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >&
FriendSearchRsp::user_info() const {
  // @@protoc_insertion_point(field_list:lbk.FriendSearchRsp.user_info)
  return user_info_;
}

// -------------------------------------------------------------------

// GetChatSessionListReq

// string request_id = 1;
inline void GetChatSessionListReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatSessionListReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionListReq.request_id)
  return _internal_request_id();
}
inline void GetChatSessionListReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionListReq.request_id)
}
inline std::string* GetChatSessionListReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionListReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetChatSessionListReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetChatSessionListReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionListReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionListReq.request_id)
}
inline void GetChatSessionListReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionListReq.request_id)
}
inline void GetChatSessionListReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionListReq.request_id)
}
inline std::string* GetChatSessionListReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionListReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionListReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionListReq.request_id)
}
inline std::string* GetChatSessionListReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionListReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionListReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionListReq.request_id)
}

// string session_id = 2;
inline bool GetChatSessionListReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetChatSessionListReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetChatSessionListReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetChatSessionListReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionListReq.session_id)
  return _internal_session_id();
}
inline void GetChatSessionListReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionListReq.session_id)
}
inline std::string* GetChatSessionListReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionListReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetChatSessionListReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetChatSessionListReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionListReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionListReq.session_id)
}
inline void GetChatSessionListReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionListReq.session_id)
}
inline void GetChatSessionListReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionListReq.session_id)
}
inline std::string* GetChatSessionListReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionListReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionListReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionListReq.session_id)
}
inline std::string* GetChatSessionListReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionListReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionListReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionListReq.session_id)
}

// string user_id = 3;
inline bool GetChatSessionListReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetChatSessionListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetChatSessionListReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetChatSessionListReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionListReq.user_id)
  return _internal_user_id();
}
inline void GetChatSessionListReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionListReq.user_id)
}
inline std::string* GetChatSessionListReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionListReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& GetChatSessionListReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetChatSessionListReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionListReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionListReq.user_id)
}
inline void GetChatSessionListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionListReq.user_id)
}
inline void GetChatSessionListReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionListReq.user_id)
}
inline std::string* GetChatSessionListReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000002u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionListReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionListReq.user_id)
}
inline std::string* GetChatSessionListReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionListReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionListReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionListReq.user_id)
}

// -------------------------------------------------------------------

// GetChatSessionListRsp

// string request_id = 1;
inline void GetChatSessionListRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatSessionListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionListRsp.request_id)
  return _internal_request_id();
}
inline void GetChatSessionListRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionListRsp.request_id)
}
inline std::string* GetChatSessionListRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionListRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetChatSessionListRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetChatSessionListRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionListRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionListRsp.request_id)
}
inline void GetChatSessionListRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionListRsp.request_id)
}
inline void GetChatSessionListRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionListRsp.request_id)
}
inline std::string* GetChatSessionListRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionListRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionListRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionListRsp.request_id)
}
inline std::string* GetChatSessionListRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionListRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionListRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionListRsp.request_id)
}

// bool success = 2;
inline void GetChatSessionListRsp::clear_success() {
  success_ = false;
}
inline bool GetChatSessionListRsp::_internal_success() const {
  return success_;
}
inline bool GetChatSessionListRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionListRsp.success)
  return _internal_success();
}
inline void GetChatSessionListRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetChatSessionListRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionListRsp.success)
}

// string errmsg = 3;
inline void GetChatSessionListRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatSessionListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionListRsp.errmsg)
  return _internal_errmsg();
}
inline void GetChatSessionListRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionListRsp.errmsg)
}
inline std::string* GetChatSessionListRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionListRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& GetChatSessionListRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetChatSessionListRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionListRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionListRsp.errmsg)
}
inline void GetChatSessionListRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionListRsp.errmsg)
}
inline void GetChatSessionListRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionListRsp.errmsg)
}
inline std::string* GetChatSessionListRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionListRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionListRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionListRsp.errmsg)
}
inline std::string* GetChatSessionListRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionListRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionListRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionListRsp.errmsg)
}

// repeated .lbk.ChatSessionInfo chat_session_info_list = 4;
inline int GetChatSessionListRsp::_internal_chat_session_info_list_size() const {
  return chat_session_info_list_.size();
}
inline int GetChatSessionListRsp::chat_session_info_list_size() const {
  return _internal_chat_session_info_list_size();
}
inline ::lbk::ChatSessionInfo* GetChatSessionListRsp::mutable_chat_session_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionListRsp.chat_session_info_list)
  return chat_session_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::ChatSessionInfo >*
GetChatSessionListRsp::mutable_chat_session_info_list() {
  // @@protoc_insertion_point(field_mutable_list:lbk.GetChatSessionListRsp.chat_session_info_list)
  return &chat_session_info_list_;
}
inline const ::lbk::ChatSessionInfo& GetChatSessionListRsp::_internal_chat_session_info_list(int index) const {
  return chat_session_info_list_.Get(index);
}
inline const ::lbk::ChatSessionInfo& GetChatSessionListRsp::chat_session_info_list(int index) const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionListRsp.chat_session_info_list)
  return _internal_chat_session_info_list(index);
}
inline ::lbk::ChatSessionInfo* GetChatSessionListRsp::_internal_add_chat_session_info_list() {
  return chat_session_info_list_.Add();
}
inline ::lbk::ChatSessionInfo* GetChatSessionListRsp::add_chat_session_info_list() {
  // @@protoc_insertion_point(field_add:lbk.GetChatSessionListRsp.chat_session_info_list)
  return _internal_add_chat_session_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::ChatSessionInfo >&
GetChatSessionListRsp::chat_session_info_list() const {
  // @@protoc_insertion_point(field_list:lbk.GetChatSessionListRsp.chat_session_info_list)
  return chat_session_info_list_;
}

// -------------------------------------------------------------------

// ChatSessionCreateReq

// string request_id = 1;
inline void ChatSessionCreateReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatSessionCreateReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateReq.request_id)
  return _internal_request_id();
}
inline void ChatSessionCreateReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateReq.request_id)
}
inline std::string* ChatSessionCreateReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& ChatSessionCreateReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void ChatSessionCreateReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatSessionCreateReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.ChatSessionCreateReq.request_id)
}
inline void ChatSessionCreateReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.ChatSessionCreateReq.request_id)
}
inline void ChatSessionCreateReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.ChatSessionCreateReq.request_id)
}
inline std::string* ChatSessionCreateReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatSessionCreateReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.ChatSessionCreateReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatSessionCreateReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.ChatSessionCreateReq.request_id)
}
inline std::string* ChatSessionCreateReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.ChatSessionCreateReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatSessionCreateReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.ChatSessionCreateReq.request_id)
}

// string session_id = 2;
inline bool ChatSessionCreateReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatSessionCreateReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void ChatSessionCreateReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatSessionCreateReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateReq.session_id)
  return _internal_session_id();
}
inline void ChatSessionCreateReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateReq.session_id)
}
inline std::string* ChatSessionCreateReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& ChatSessionCreateReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void ChatSessionCreateReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatSessionCreateReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.ChatSessionCreateReq.session_id)
}
inline void ChatSessionCreateReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.ChatSessionCreateReq.session_id)
}
inline void ChatSessionCreateReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.ChatSessionCreateReq.session_id)
}
inline std::string* ChatSessionCreateReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatSessionCreateReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.ChatSessionCreateReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatSessionCreateReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.ChatSessionCreateReq.session_id)
}
inline std::string* ChatSessionCreateReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.ChatSessionCreateReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatSessionCreateReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.ChatSessionCreateReq.session_id)
}

// string user_id = 3;
inline bool ChatSessionCreateReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatSessionCreateReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void ChatSessionCreateReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatSessionCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateReq.user_id)
  return _internal_user_id();
}
inline void ChatSessionCreateReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateReq.user_id)
}
inline std::string* ChatSessionCreateReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ChatSessionCreateReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void ChatSessionCreateReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatSessionCreateReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.ChatSessionCreateReq.user_id)
}
inline void ChatSessionCreateReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.ChatSessionCreateReq.user_id)
}
inline void ChatSessionCreateReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.ChatSessionCreateReq.user_id)
}
inline std::string* ChatSessionCreateReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000002u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatSessionCreateReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.ChatSessionCreateReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatSessionCreateReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.ChatSessionCreateReq.user_id)
}
inline std::string* ChatSessionCreateReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.ChatSessionCreateReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatSessionCreateReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.ChatSessionCreateReq.user_id)
}

// string chat_session_name = 4;
inline void ChatSessionCreateReq::clear_chat_session_name() {
  chat_session_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatSessionCreateReq::chat_session_name() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateReq.chat_session_name)
  return _internal_chat_session_name();
}
inline void ChatSessionCreateReq::set_chat_session_name(const std::string& value) {
  _internal_set_chat_session_name(value);
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateReq.chat_session_name)
}
inline std::string* ChatSessionCreateReq::mutable_chat_session_name() {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateReq.chat_session_name)
  return _internal_mutable_chat_session_name();
}
inline const std::string& ChatSessionCreateReq::_internal_chat_session_name() const {
  return chat_session_name_.Get();
}
inline void ChatSessionCreateReq::_internal_set_chat_session_name(const std::string& value) {
  
  chat_session_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatSessionCreateReq::set_chat_session_name(std::string&& value) {
  
  chat_session_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.ChatSessionCreateReq.chat_session_name)
}
inline void ChatSessionCreateReq::set_chat_session_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_session_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.ChatSessionCreateReq.chat_session_name)
}
inline void ChatSessionCreateReq::set_chat_session_name(const char* value,
    size_t size) {
  
  chat_session_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.ChatSessionCreateReq.chat_session_name)
}
inline std::string* ChatSessionCreateReq::_internal_mutable_chat_session_name() {
  
  return chat_session_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatSessionCreateReq::release_chat_session_name() {
  // @@protoc_insertion_point(field_release:lbk.ChatSessionCreateReq.chat_session_name)
  return chat_session_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatSessionCreateReq::set_allocated_chat_session_name(std::string* chat_session_name) {
  if (chat_session_name != nullptr) {
    
  } else {
    
  }
  chat_session_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_session_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.ChatSessionCreateReq.chat_session_name)
}
inline std::string* ChatSessionCreateReq::unsafe_arena_release_chat_session_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.ChatSessionCreateReq.chat_session_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return chat_session_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatSessionCreateReq::unsafe_arena_set_allocated_chat_session_name(
    std::string* chat_session_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (chat_session_name != nullptr) {
    
  } else {
    
  }
  chat_session_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chat_session_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.ChatSessionCreateReq.chat_session_name)
}

// repeated string member_id_list = 5;
inline int ChatSessionCreateReq::_internal_member_id_list_size() const {
  return member_id_list_.size();
}
inline int ChatSessionCreateReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void ChatSessionCreateReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline std::string* ChatSessionCreateReq::add_member_id_list() {
  // @@protoc_insertion_point(field_add_mutable:lbk.ChatSessionCreateReq.member_id_list)
  return _internal_add_member_id_list();
}
inline const std::string& ChatSessionCreateReq::_internal_member_id_list(int index) const {
  return member_id_list_.Get(index);
}
inline const std::string& ChatSessionCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateReq.member_id_list)
  return _internal_member_id_list(index);
}
inline std::string* ChatSessionCreateReq::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateReq.member_id_list)
  return member_id_list_.Mutable(index);
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateReq.member_id_list)
  member_id_list_.Mutable(index)->assign(value);
}
inline void ChatSessionCreateReq::set_member_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateReq.member_id_list)
  member_id_list_.Mutable(index)->assign(std::move(value));
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  member_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbk.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const char* value, size_t size) {
  member_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbk.ChatSessionCreateReq.member_id_list)
}
inline std::string* ChatSessionCreateReq::_internal_add_member_id_list() {
  return member_id_list_.Add();
}
inline void ChatSessionCreateReq::add_member_id_list(const std::string& value) {
  member_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbk.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::add_member_id_list(std::string&& value) {
  member_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lbk.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::add_member_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  member_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbk.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::add_member_id_list(const char* value, size_t size) {
  member_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbk.ChatSessionCreateReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatSessionCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:lbk.ChatSessionCreateReq.member_id_list)
  return member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatSessionCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:lbk.ChatSessionCreateReq.member_id_list)
  return &member_id_list_;
}

// -------------------------------------------------------------------

// ChatSessionCreateRsp

// string request_id = 1;
inline void ChatSessionCreateRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatSessionCreateRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateRsp.request_id)
  return _internal_request_id();
}
inline void ChatSessionCreateRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateRsp.request_id)
}
inline std::string* ChatSessionCreateRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& ChatSessionCreateRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void ChatSessionCreateRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatSessionCreateRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.ChatSessionCreateRsp.request_id)
}
inline void ChatSessionCreateRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.ChatSessionCreateRsp.request_id)
}
inline void ChatSessionCreateRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.ChatSessionCreateRsp.request_id)
}
inline std::string* ChatSessionCreateRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatSessionCreateRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.ChatSessionCreateRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatSessionCreateRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.ChatSessionCreateRsp.request_id)
}
inline std::string* ChatSessionCreateRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.ChatSessionCreateRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatSessionCreateRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.ChatSessionCreateRsp.request_id)
}

// bool success = 2;
inline void ChatSessionCreateRsp::clear_success() {
  success_ = false;
}
inline bool ChatSessionCreateRsp::_internal_success() const {
  return success_;
}
inline bool ChatSessionCreateRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateRsp.success)
  return _internal_success();
}
inline void ChatSessionCreateRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ChatSessionCreateRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateRsp.success)
}

// string errmsg = 3;
inline void ChatSessionCreateRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatSessionCreateRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateRsp.errmsg)
  return _internal_errmsg();
}
inline void ChatSessionCreateRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.ChatSessionCreateRsp.errmsg)
}
inline std::string* ChatSessionCreateRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ChatSessionCreateRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ChatSessionCreateRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatSessionCreateRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.ChatSessionCreateRsp.errmsg)
}
inline void ChatSessionCreateRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.ChatSessionCreateRsp.errmsg)
}
inline void ChatSessionCreateRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.ChatSessionCreateRsp.errmsg)
}
inline std::string* ChatSessionCreateRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatSessionCreateRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.ChatSessionCreateRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatSessionCreateRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.ChatSessionCreateRsp.errmsg)
}
inline std::string* ChatSessionCreateRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.ChatSessionCreateRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatSessionCreateRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.ChatSessionCreateRsp.errmsg)
}

// .lbk.ChatSessionInfo chat_session_info = 4;
inline bool ChatSessionCreateRsp::_internal_has_chat_session_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || chat_session_info_ != nullptr);
  return value;
}
inline bool ChatSessionCreateRsp::has_chat_session_info() const {
  return _internal_has_chat_session_info();
}
inline const ::lbk::ChatSessionInfo& ChatSessionCreateRsp::_internal_chat_session_info() const {
  const ::lbk::ChatSessionInfo* p = chat_session_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lbk::ChatSessionInfo*>(
      &::lbk::_ChatSessionInfo_default_instance_);
}
inline const ::lbk::ChatSessionInfo& ChatSessionCreateRsp::chat_session_info() const {
  // @@protoc_insertion_point(field_get:lbk.ChatSessionCreateRsp.chat_session_info)
  return _internal_chat_session_info();
}
inline void ChatSessionCreateRsp::unsafe_arena_set_allocated_chat_session_info(
    ::lbk::ChatSessionInfo* chat_session_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_session_info_);
  }
  chat_session_info_ = chat_session_info;
  if (chat_session_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.ChatSessionCreateRsp.chat_session_info)
}
inline ::lbk::ChatSessionInfo* ChatSessionCreateRsp::release_chat_session_info() {
  auto temp = unsafe_arena_release_chat_session_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lbk::ChatSessionInfo* ChatSessionCreateRsp::unsafe_arena_release_chat_session_info() {
  // @@protoc_insertion_point(field_release:lbk.ChatSessionCreateRsp.chat_session_info)
  _has_bits_[0] &= ~0x00000001u;
  ::lbk::ChatSessionInfo* temp = chat_session_info_;
  chat_session_info_ = nullptr;
  return temp;
}
inline ::lbk::ChatSessionInfo* ChatSessionCreateRsp::_internal_mutable_chat_session_info() {
  _has_bits_[0] |= 0x00000001u;
  if (chat_session_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::lbk::ChatSessionInfo>(GetArena());
    chat_session_info_ = p;
  }
  return chat_session_info_;
}
inline ::lbk::ChatSessionInfo* ChatSessionCreateRsp::mutable_chat_session_info() {
  // @@protoc_insertion_point(field_mutable:lbk.ChatSessionCreateRsp.chat_session_info)
  return _internal_mutable_chat_session_info();
}
inline void ChatSessionCreateRsp::set_allocated_chat_session_info(::lbk::ChatSessionInfo* chat_session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_session_info_);
  }
  if (chat_session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_session_info)->GetArena();
    if (message_arena != submessage_arena) {
      chat_session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_session_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chat_session_info_ = chat_session_info;
  // @@protoc_insertion_point(field_set_allocated:lbk.ChatSessionCreateRsp.chat_session_info)
}

// -------------------------------------------------------------------

// GetChatSessionMemberReq

// string request_id = 1;
inline void GetChatSessionMemberReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatSessionMemberReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberReq.request_id)
  return _internal_request_id();
}
inline void GetChatSessionMemberReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionMemberReq.request_id)
}
inline std::string* GetChatSessionMemberReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionMemberReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetChatSessionMemberReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionMemberReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionMemberReq.request_id)
}
inline void GetChatSessionMemberReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionMemberReq.request_id)
}
inline void GetChatSessionMemberReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionMemberReq.request_id)
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionMemberReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionMemberReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionMemberReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionMemberReq.request_id)
}
inline std::string* GetChatSessionMemberReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionMemberReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionMemberReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionMemberReq.request_id)
}

// string session_id = 2;
inline bool GetChatSessionMemberReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetChatSessionMemberReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetChatSessionMemberReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetChatSessionMemberReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberReq.session_id)
  return _internal_session_id();
}
inline void GetChatSessionMemberReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionMemberReq.session_id)
}
inline std::string* GetChatSessionMemberReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionMemberReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetChatSessionMemberReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionMemberReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionMemberReq.session_id)
}
inline void GetChatSessionMemberReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionMemberReq.session_id)
}
inline void GetChatSessionMemberReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionMemberReq.session_id)
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionMemberReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionMemberReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionMemberReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionMemberReq.session_id)
}
inline std::string* GetChatSessionMemberReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionMemberReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionMemberReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionMemberReq.session_id)
}

// string user_id = 3;
inline bool GetChatSessionMemberReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetChatSessionMemberReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetChatSessionMemberReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetChatSessionMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberReq.user_id)
  return _internal_user_id();
}
inline void GetChatSessionMemberReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionMemberReq.user_id)
}
inline std::string* GetChatSessionMemberReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionMemberReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& GetChatSessionMemberReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionMemberReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionMemberReq.user_id)
}
inline void GetChatSessionMemberReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionMemberReq.user_id)
}
inline void GetChatSessionMemberReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionMemberReq.user_id)
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000002u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionMemberReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionMemberReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionMemberReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionMemberReq.user_id)
}
inline std::string* GetChatSessionMemberReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionMemberReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionMemberReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionMemberReq.user_id)
}

// string chat_session_id = 4;
inline void GetChatSessionMemberReq::clear_chat_session_id() {
  chat_session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatSessionMemberReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberReq.chat_session_id)
  return _internal_chat_session_id();
}
inline void GetChatSessionMemberReq::set_chat_session_id(const std::string& value) {
  _internal_set_chat_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionMemberReq.chat_session_id)
}
inline std::string* GetChatSessionMemberReq::mutable_chat_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionMemberReq.chat_session_id)
  return _internal_mutable_chat_session_id();
}
inline const std::string& GetChatSessionMemberReq::_internal_chat_session_id() const {
  return chat_session_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_chat_session_id(const std::string& value) {
  
  chat_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionMemberReq::set_chat_session_id(std::string&& value) {
  
  chat_session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionMemberReq.chat_session_id)
}
inline void GetChatSessionMemberReq::set_chat_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionMemberReq.chat_session_id)
}
inline void GetChatSessionMemberReq::set_chat_session_id(const char* value,
    size_t size) {
  
  chat_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionMemberReq.chat_session_id)
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_chat_session_id() {
  
  return chat_session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionMemberReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionMemberReq.chat_session_id)
  return chat_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionMemberReq::set_allocated_chat_session_id(std::string* chat_session_id) {
  if (chat_session_id != nullptr) {
    
  } else {
    
  }
  chat_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionMemberReq.chat_session_id)
}
inline std::string* GetChatSessionMemberReq::unsafe_arena_release_chat_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionMemberReq.chat_session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return chat_session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionMemberReq::unsafe_arena_set_allocated_chat_session_id(
    std::string* chat_session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (chat_session_id != nullptr) {
    
  } else {
    
  }
  chat_session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chat_session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionMemberReq.chat_session_id)
}

// -------------------------------------------------------------------

// GetChatSessionMemberRsp

// string request_id = 1;
inline void GetChatSessionMemberRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatSessionMemberRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberRsp.request_id)
  return _internal_request_id();
}
inline void GetChatSessionMemberRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionMemberRsp.request_id)
}
inline std::string* GetChatSessionMemberRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionMemberRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetChatSessionMemberRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetChatSessionMemberRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionMemberRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionMemberRsp.request_id)
}
inline void GetChatSessionMemberRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionMemberRsp.request_id)
}
inline void GetChatSessionMemberRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionMemberRsp.request_id)
}
inline std::string* GetChatSessionMemberRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionMemberRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionMemberRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionMemberRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionMemberRsp.request_id)
}
inline std::string* GetChatSessionMemberRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionMemberRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionMemberRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionMemberRsp.request_id)
}

// bool success = 2;
inline void GetChatSessionMemberRsp::clear_success() {
  success_ = false;
}
inline bool GetChatSessionMemberRsp::_internal_success() const {
  return success_;
}
inline bool GetChatSessionMemberRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberRsp.success)
  return _internal_success();
}
inline void GetChatSessionMemberRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetChatSessionMemberRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionMemberRsp.success)
}

// string errmsg = 3;
inline void GetChatSessionMemberRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatSessionMemberRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberRsp.errmsg)
  return _internal_errmsg();
}
inline void GetChatSessionMemberRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.GetChatSessionMemberRsp.errmsg)
}
inline std::string* GetChatSessionMemberRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionMemberRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& GetChatSessionMemberRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetChatSessionMemberRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatSessionMemberRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetChatSessionMemberRsp.errmsg)
}
inline void GetChatSessionMemberRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetChatSessionMemberRsp.errmsg)
}
inline void GetChatSessionMemberRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetChatSessionMemberRsp.errmsg)
}
inline std::string* GetChatSessionMemberRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatSessionMemberRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.GetChatSessionMemberRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatSessionMemberRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetChatSessionMemberRsp.errmsg)
}
inline std::string* GetChatSessionMemberRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetChatSessionMemberRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetChatSessionMemberRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetChatSessionMemberRsp.errmsg)
}

// repeated .lbk.UserInfo member_info_list = 4;
inline int GetChatSessionMemberRsp::_internal_member_info_list_size() const {
  return member_info_list_.size();
}
inline int GetChatSessionMemberRsp::member_info_list_size() const {
  return _internal_member_info_list_size();
}
inline ::lbk::UserInfo* GetChatSessionMemberRsp::mutable_member_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:lbk.GetChatSessionMemberRsp.member_info_list)
  return member_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >*
GetChatSessionMemberRsp::mutable_member_info_list() {
  // @@protoc_insertion_point(field_mutable_list:lbk.GetChatSessionMemberRsp.member_info_list)
  return &member_info_list_;
}
inline const ::lbk::UserInfo& GetChatSessionMemberRsp::_internal_member_info_list(int index) const {
  return member_info_list_.Get(index);
}
inline const ::lbk::UserInfo& GetChatSessionMemberRsp::member_info_list(int index) const {
  // @@protoc_insertion_point(field_get:lbk.GetChatSessionMemberRsp.member_info_list)
  return _internal_member_info_list(index);
}
inline ::lbk::UserInfo* GetChatSessionMemberRsp::_internal_add_member_info_list() {
  return member_info_list_.Add();
}
inline ::lbk::UserInfo* GetChatSessionMemberRsp::add_member_info_list() {
  // @@protoc_insertion_point(field_add:lbk.GetChatSessionMemberRsp.member_info_list)
  return _internal_add_member_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbk::UserInfo >&
GetChatSessionMemberRsp::member_info_list() const {
  // @@protoc_insertion_point(field_list:lbk.GetChatSessionMemberRsp.member_info_list)
  return member_info_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lbk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
