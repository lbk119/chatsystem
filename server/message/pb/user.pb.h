// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace lbk {
class GetMultiUserInfoReq;
class GetMultiUserInfoReqDefaultTypeInternal;
extern GetMultiUserInfoReqDefaultTypeInternal _GetMultiUserInfoReq_default_instance_;
class GetMultiUserInfoRsp;
class GetMultiUserInfoRspDefaultTypeInternal;
extern GetMultiUserInfoRspDefaultTypeInternal _GetMultiUserInfoRsp_default_instance_;
class GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse;
class GetMultiUserInfoRsp_UsersInfoEntry_DoNotUseDefaultTypeInternal;
extern GetMultiUserInfoRsp_UsersInfoEntry_DoNotUseDefaultTypeInternal _GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse_default_instance_;
class GetUserInfoReq;
class GetUserInfoReqDefaultTypeInternal;
extern GetUserInfoReqDefaultTypeInternal _GetUserInfoReq_default_instance_;
class GetUserInfoRsp;
class GetUserInfoRspDefaultTypeInternal;
extern GetUserInfoRspDefaultTypeInternal _GetUserInfoRsp_default_instance_;
class PhoneLoginReq;
class PhoneLoginReqDefaultTypeInternal;
extern PhoneLoginReqDefaultTypeInternal _PhoneLoginReq_default_instance_;
class PhoneLoginRsp;
class PhoneLoginRspDefaultTypeInternal;
extern PhoneLoginRspDefaultTypeInternal _PhoneLoginRsp_default_instance_;
class PhoneRegisterReq;
class PhoneRegisterReqDefaultTypeInternal;
extern PhoneRegisterReqDefaultTypeInternal _PhoneRegisterReq_default_instance_;
class PhoneRegisterRsp;
class PhoneRegisterRspDefaultTypeInternal;
extern PhoneRegisterRspDefaultTypeInternal _PhoneRegisterRsp_default_instance_;
class PhoneVerifyCodeReq;
class PhoneVerifyCodeReqDefaultTypeInternal;
extern PhoneVerifyCodeReqDefaultTypeInternal _PhoneVerifyCodeReq_default_instance_;
class PhoneVerifyCodeRsp;
class PhoneVerifyCodeRspDefaultTypeInternal;
extern PhoneVerifyCodeRspDefaultTypeInternal _PhoneVerifyCodeRsp_default_instance_;
class SetUserAvatarReq;
class SetUserAvatarReqDefaultTypeInternal;
extern SetUserAvatarReqDefaultTypeInternal _SetUserAvatarReq_default_instance_;
class SetUserAvatarRsp;
class SetUserAvatarRspDefaultTypeInternal;
extern SetUserAvatarRspDefaultTypeInternal _SetUserAvatarRsp_default_instance_;
class SetUserDescriptionReq;
class SetUserDescriptionReqDefaultTypeInternal;
extern SetUserDescriptionReqDefaultTypeInternal _SetUserDescriptionReq_default_instance_;
class SetUserDescriptionRsp;
class SetUserDescriptionRspDefaultTypeInternal;
extern SetUserDescriptionRspDefaultTypeInternal _SetUserDescriptionRsp_default_instance_;
class SetUserNicknameReq;
class SetUserNicknameReqDefaultTypeInternal;
extern SetUserNicknameReqDefaultTypeInternal _SetUserNicknameReq_default_instance_;
class SetUserNicknameRsp;
class SetUserNicknameRspDefaultTypeInternal;
extern SetUserNicknameRspDefaultTypeInternal _SetUserNicknameRsp_default_instance_;
class SetUserPhoneNumberReq;
class SetUserPhoneNumberReqDefaultTypeInternal;
extern SetUserPhoneNumberReqDefaultTypeInternal _SetUserPhoneNumberReq_default_instance_;
class SetUserPhoneNumberRsp;
class SetUserPhoneNumberRspDefaultTypeInternal;
extern SetUserPhoneNumberRspDefaultTypeInternal _SetUserPhoneNumberRsp_default_instance_;
class UserLoginReq;
class UserLoginReqDefaultTypeInternal;
extern UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
class UserLoginRsp;
class UserLoginRspDefaultTypeInternal;
extern UserLoginRspDefaultTypeInternal _UserLoginRsp_default_instance_;
class UserRegisterReq;
class UserRegisterReqDefaultTypeInternal;
extern UserRegisterReqDefaultTypeInternal _UserRegisterReq_default_instance_;
class UserRegisterRsp;
class UserRegisterRspDefaultTypeInternal;
extern UserRegisterRspDefaultTypeInternal _UserRegisterRsp_default_instance_;
}  // namespace lbk
PROTOBUF_NAMESPACE_OPEN
template<> ::lbk::GetMultiUserInfoReq* Arena::CreateMaybeMessage<::lbk::GetMultiUserInfoReq>(Arena*);
template<> ::lbk::GetMultiUserInfoRsp* Arena::CreateMaybeMessage<::lbk::GetMultiUserInfoRsp>(Arena*);
template<> ::lbk::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::lbk::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse>(Arena*);
template<> ::lbk::GetUserInfoReq* Arena::CreateMaybeMessage<::lbk::GetUserInfoReq>(Arena*);
template<> ::lbk::GetUserInfoRsp* Arena::CreateMaybeMessage<::lbk::GetUserInfoRsp>(Arena*);
template<> ::lbk::PhoneLoginReq* Arena::CreateMaybeMessage<::lbk::PhoneLoginReq>(Arena*);
template<> ::lbk::PhoneLoginRsp* Arena::CreateMaybeMessage<::lbk::PhoneLoginRsp>(Arena*);
template<> ::lbk::PhoneRegisterReq* Arena::CreateMaybeMessage<::lbk::PhoneRegisterReq>(Arena*);
template<> ::lbk::PhoneRegisterRsp* Arena::CreateMaybeMessage<::lbk::PhoneRegisterRsp>(Arena*);
template<> ::lbk::PhoneVerifyCodeReq* Arena::CreateMaybeMessage<::lbk::PhoneVerifyCodeReq>(Arena*);
template<> ::lbk::PhoneVerifyCodeRsp* Arena::CreateMaybeMessage<::lbk::PhoneVerifyCodeRsp>(Arena*);
template<> ::lbk::SetUserAvatarReq* Arena::CreateMaybeMessage<::lbk::SetUserAvatarReq>(Arena*);
template<> ::lbk::SetUserAvatarRsp* Arena::CreateMaybeMessage<::lbk::SetUserAvatarRsp>(Arena*);
template<> ::lbk::SetUserDescriptionReq* Arena::CreateMaybeMessage<::lbk::SetUserDescriptionReq>(Arena*);
template<> ::lbk::SetUserDescriptionRsp* Arena::CreateMaybeMessage<::lbk::SetUserDescriptionRsp>(Arena*);
template<> ::lbk::SetUserNicknameReq* Arena::CreateMaybeMessage<::lbk::SetUserNicknameReq>(Arena*);
template<> ::lbk::SetUserNicknameRsp* Arena::CreateMaybeMessage<::lbk::SetUserNicknameRsp>(Arena*);
template<> ::lbk::SetUserPhoneNumberReq* Arena::CreateMaybeMessage<::lbk::SetUserPhoneNumberReq>(Arena*);
template<> ::lbk::SetUserPhoneNumberRsp* Arena::CreateMaybeMessage<::lbk::SetUserPhoneNumberRsp>(Arena*);
template<> ::lbk::UserLoginReq* Arena::CreateMaybeMessage<::lbk::UserLoginReq>(Arena*);
template<> ::lbk::UserLoginRsp* Arena::CreateMaybeMessage<::lbk::UserLoginRsp>(Arena*);
template<> ::lbk::UserRegisterReq* Arena::CreateMaybeMessage<::lbk::UserRegisterReq>(Arena*);
template<> ::lbk::UserRegisterRsp* Arena::CreateMaybeMessage<::lbk::UserRegisterRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lbk {

// ===================================================================

class UserRegisterReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.UserRegisterReq) */ {
 public:
  inline UserRegisterReq() : UserRegisterReq(nullptr) {};
  virtual ~UserRegisterReq();

  UserRegisterReq(const UserRegisterReq& from);
  UserRegisterReq(UserRegisterReq&& from) noexcept
    : UserRegisterReq() {
    *this = ::std::move(from);
  }

  inline UserRegisterReq& operator=(const UserRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterReq& operator=(UserRegisterReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterReq* internal_default_instance() {
    return reinterpret_cast<const UserRegisterReq*>(
               &_UserRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRegisterReq& a, UserRegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterReq* New() const final {
    return CreateMaybeMessage<UserRegisterReq>(nullptr);
  }

  UserRegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRegisterReq& from);
  void MergeFrom(const UserRegisterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.UserRegisterReq";
  }
  protected:
  explicit UserRegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kVerifyCodeIdFieldNumber = 4,
    kVerifyCodeFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nickname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nickname(
      std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string verify_code_id = 4;
  bool has_verify_code_id() const;
  private:
  bool _internal_has_verify_code_id() const;
  public:
  void clear_verify_code_id();
  const std::string& verify_code_id() const;
  void set_verify_code_id(const std::string& value);
  void set_verify_code_id(std::string&& value);
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  std::string* mutable_verify_code_id();
  std::string* release_verify_code_id();
  void set_allocated_verify_code_id(std::string* verify_code_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code_id(
      std::string* verify_code_id);
  private:
  const std::string& _internal_verify_code_id() const;
  void _internal_set_verify_code_id(const std::string& value);
  std::string* _internal_mutable_verify_code_id();
  public:

  // string verify_code = 5;
  bool has_verify_code() const;
  private:
  bool _internal_has_verify_code() const;
  public:
  void clear_verify_code();
  const std::string& verify_code() const;
  void set_verify_code(const std::string& value);
  void set_verify_code(std::string&& value);
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  std::string* mutable_verify_code();
  std::string* release_verify_code();
  void set_allocated_verify_code(std::string* verify_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code(
      std::string* verify_code);
  private:
  const std::string& _internal_verify_code() const;
  void _internal_set_verify_code(const std::string& value);
  std::string* _internal_mutable_verify_code();
  public:

  // @@protoc_insertion_point(class_scope:lbk.UserRegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.UserRegisterRsp) */ {
 public:
  inline UserRegisterRsp() : UserRegisterRsp(nullptr) {};
  virtual ~UserRegisterRsp();

  UserRegisterRsp(const UserRegisterRsp& from);
  UserRegisterRsp(UserRegisterRsp&& from) noexcept
    : UserRegisterRsp() {
    *this = ::std::move(from);
  }

  inline UserRegisterRsp& operator=(const UserRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterRsp& operator=(UserRegisterRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRegisterRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterRsp* internal_default_instance() {
    return reinterpret_cast<const UserRegisterRsp*>(
               &_UserRegisterRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegisterRsp& a, UserRegisterRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterRsp* New() const final {
    return CreateMaybeMessage<UserRegisterRsp>(nullptr);
  }

  UserRegisterRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRegisterRsp& from);
  void MergeFrom(const UserRegisterRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.UserRegisterRsp";
  }
  protected:
  explicit UserRegisterRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.UserRegisterRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserLoginReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.UserLoginReq) */ {
 public:
  inline UserLoginReq() : UserLoginReq(nullptr) {};
  virtual ~UserLoginReq();

  UserLoginReq(const UserLoginReq& from);
  UserLoginReq(UserLoginReq&& from) noexcept
    : UserLoginReq() {
    *this = ::std::move(from);
  }

  inline UserLoginReq& operator=(const UserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginReq& operator=(UserLoginReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginReq* internal_default_instance() {
    return reinterpret_cast<const UserLoginReq*>(
               &_UserLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserLoginReq& a, UserLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginReq* New() const final {
    return CreateMaybeMessage<UserLoginReq>(nullptr);
  }

  UserLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginReq& from);
  void MergeFrom(const UserLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.UserLoginReq";
  }
  protected:
  explicit UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kVerifyCodeIdFieldNumber = 4,
    kVerifyCodeFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nickname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nickname(
      std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string verify_code_id = 4;
  bool has_verify_code_id() const;
  private:
  bool _internal_has_verify_code_id() const;
  public:
  void clear_verify_code_id();
  const std::string& verify_code_id() const;
  void set_verify_code_id(const std::string& value);
  void set_verify_code_id(std::string&& value);
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  std::string* mutable_verify_code_id();
  std::string* release_verify_code_id();
  void set_allocated_verify_code_id(std::string* verify_code_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code_id(
      std::string* verify_code_id);
  private:
  const std::string& _internal_verify_code_id() const;
  void _internal_set_verify_code_id(const std::string& value);
  std::string* _internal_mutable_verify_code_id();
  public:

  // string verify_code = 5;
  bool has_verify_code() const;
  private:
  bool _internal_has_verify_code() const;
  public:
  void clear_verify_code();
  const std::string& verify_code() const;
  void set_verify_code(const std::string& value);
  void set_verify_code(std::string&& value);
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  std::string* mutable_verify_code();
  std::string* release_verify_code();
  void set_allocated_verify_code(std::string* verify_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code(
      std::string* verify_code);
  private:
  const std::string& _internal_verify_code() const;
  void _internal_set_verify_code(const std::string& value);
  std::string* _internal_mutable_verify_code();
  public:

  // @@protoc_insertion_point(class_scope:lbk.UserLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.UserLoginRsp) */ {
 public:
  inline UserLoginRsp() : UserLoginRsp(nullptr) {};
  virtual ~UserLoginRsp();

  UserLoginRsp(const UserLoginRsp& from);
  UserLoginRsp(UserLoginRsp&& from) noexcept
    : UserLoginRsp() {
    *this = ::std::move(from);
  }

  inline UserLoginRsp& operator=(const UserLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRsp& operator=(UserLoginRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRsp* internal_default_instance() {
    return reinterpret_cast<const UserLoginRsp*>(
               &_UserLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserLoginRsp& a, UserLoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRsp* New() const final {
    return CreateMaybeMessage<UserLoginRsp>(nullptr);
  }

  UserLoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginRsp& from);
  void MergeFrom(const UserLoginRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.UserLoginRsp";
  }
  protected:
  explicit UserLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kLoginSessionIdFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string login_session_id = 4;
  void clear_login_session_id();
  const std::string& login_session_id() const;
  void set_login_session_id(const std::string& value);
  void set_login_session_id(std::string&& value);
  void set_login_session_id(const char* value);
  void set_login_session_id(const char* value, size_t size);
  std::string* mutable_login_session_id();
  std::string* release_login_session_id();
  void set_allocated_login_session_id(std::string* login_session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_session_id(
      std::string* login_session_id);
  private:
  const std::string& _internal_login_session_id() const;
  void _internal_set_login_session_id(const std::string& value);
  std::string* _internal_mutable_login_session_id();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.UserLoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_session_id_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PhoneVerifyCodeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.PhoneVerifyCodeReq) */ {
 public:
  inline PhoneVerifyCodeReq() : PhoneVerifyCodeReq(nullptr) {};
  virtual ~PhoneVerifyCodeReq();

  PhoneVerifyCodeReq(const PhoneVerifyCodeReq& from);
  PhoneVerifyCodeReq(PhoneVerifyCodeReq&& from) noexcept
    : PhoneVerifyCodeReq() {
    *this = ::std::move(from);
  }

  inline PhoneVerifyCodeReq& operator=(const PhoneVerifyCodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneVerifyCodeReq& operator=(PhoneVerifyCodeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneVerifyCodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneVerifyCodeReq* internal_default_instance() {
    return reinterpret_cast<const PhoneVerifyCodeReq*>(
               &_PhoneVerifyCodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PhoneVerifyCodeReq& a, PhoneVerifyCodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneVerifyCodeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneVerifyCodeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneVerifyCodeReq* New() const final {
    return CreateMaybeMessage<PhoneVerifyCodeReq>(nullptr);
  }

  PhoneVerifyCodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneVerifyCodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneVerifyCodeReq& from);
  void MergeFrom(const PhoneVerifyCodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneVerifyCodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.PhoneVerifyCodeReq";
  }
  protected:
  explicit PhoneVerifyCodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kPhoneNumberFieldNumber = 2,
    kPasswordFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string phone_number = 2;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phone_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phone_number(
      std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:lbk.PhoneVerifyCodeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PhoneVerifyCodeRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.PhoneVerifyCodeRsp) */ {
 public:
  inline PhoneVerifyCodeRsp() : PhoneVerifyCodeRsp(nullptr) {};
  virtual ~PhoneVerifyCodeRsp();

  PhoneVerifyCodeRsp(const PhoneVerifyCodeRsp& from);
  PhoneVerifyCodeRsp(PhoneVerifyCodeRsp&& from) noexcept
    : PhoneVerifyCodeRsp() {
    *this = ::std::move(from);
  }

  inline PhoneVerifyCodeRsp& operator=(const PhoneVerifyCodeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneVerifyCodeRsp& operator=(PhoneVerifyCodeRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneVerifyCodeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneVerifyCodeRsp* internal_default_instance() {
    return reinterpret_cast<const PhoneVerifyCodeRsp*>(
               &_PhoneVerifyCodeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PhoneVerifyCodeRsp& a, PhoneVerifyCodeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneVerifyCodeRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneVerifyCodeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneVerifyCodeRsp* New() const final {
    return CreateMaybeMessage<PhoneVerifyCodeRsp>(nullptr);
  }

  PhoneVerifyCodeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneVerifyCodeRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneVerifyCodeRsp& from);
  void MergeFrom(const PhoneVerifyCodeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneVerifyCodeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.PhoneVerifyCodeRsp";
  }
  protected:
  explicit PhoneVerifyCodeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kVerifyCodeIdFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string verify_code_id = 4;
  bool has_verify_code_id() const;
  private:
  bool _internal_has_verify_code_id() const;
  public:
  void clear_verify_code_id();
  const std::string& verify_code_id() const;
  void set_verify_code_id(const std::string& value);
  void set_verify_code_id(std::string&& value);
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  std::string* mutable_verify_code_id();
  std::string* release_verify_code_id();
  void set_allocated_verify_code_id(std::string* verify_code_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code_id(
      std::string* verify_code_id);
  private:
  const std::string& _internal_verify_code_id() const;
  void _internal_set_verify_code_id(const std::string& value);
  std::string* _internal_mutable_verify_code_id();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.PhoneVerifyCodeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_id_;
  bool success_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PhoneRegisterReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.PhoneRegisterReq) */ {
 public:
  inline PhoneRegisterReq() : PhoneRegisterReq(nullptr) {};
  virtual ~PhoneRegisterReq();

  PhoneRegisterReq(const PhoneRegisterReq& from);
  PhoneRegisterReq(PhoneRegisterReq&& from) noexcept
    : PhoneRegisterReq() {
    *this = ::std::move(from);
  }

  inline PhoneRegisterReq& operator=(const PhoneRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneRegisterReq& operator=(PhoneRegisterReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneRegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneRegisterReq* internal_default_instance() {
    return reinterpret_cast<const PhoneRegisterReq*>(
               &_PhoneRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PhoneRegisterReq& a, PhoneRegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneRegisterReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneRegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneRegisterReq* New() const final {
    return CreateMaybeMessage<PhoneRegisterReq>(nullptr);
  }

  PhoneRegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneRegisterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneRegisterReq& from);
  void MergeFrom(const PhoneRegisterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneRegisterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.PhoneRegisterReq";
  }
  protected:
  explicit PhoneRegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kPhoneNumberFieldNumber = 2,
    kVerifyCodeIdFieldNumber = 3,
    kVerifyCodeFieldNumber = 4,
    kPasswordFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string phone_number = 2;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phone_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phone_number(
      std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string verify_code_id = 3;
  bool has_verify_code_id() const;
  private:
  bool _internal_has_verify_code_id() const;
  public:
  void clear_verify_code_id();
  const std::string& verify_code_id() const;
  void set_verify_code_id(const std::string& value);
  void set_verify_code_id(std::string&& value);
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  std::string* mutable_verify_code_id();
  std::string* release_verify_code_id();
  void set_allocated_verify_code_id(std::string* verify_code_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code_id(
      std::string* verify_code_id);
  private:
  const std::string& _internal_verify_code_id() const;
  void _internal_set_verify_code_id(const std::string& value);
  std::string* _internal_mutable_verify_code_id();
  public:

  // string verify_code = 4;
  bool has_verify_code() const;
  private:
  bool _internal_has_verify_code() const;
  public:
  void clear_verify_code();
  const std::string& verify_code() const;
  void set_verify_code(const std::string& value);
  void set_verify_code(std::string&& value);
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  std::string* mutable_verify_code();
  std::string* release_verify_code();
  void set_allocated_verify_code(std::string* verify_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code(
      std::string* verify_code);
  private:
  const std::string& _internal_verify_code() const;
  void _internal_set_verify_code(const std::string& value);
  std::string* _internal_mutable_verify_code();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:lbk.PhoneRegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PhoneRegisterRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.PhoneRegisterRsp) */ {
 public:
  inline PhoneRegisterRsp() : PhoneRegisterRsp(nullptr) {};
  virtual ~PhoneRegisterRsp();

  PhoneRegisterRsp(const PhoneRegisterRsp& from);
  PhoneRegisterRsp(PhoneRegisterRsp&& from) noexcept
    : PhoneRegisterRsp() {
    *this = ::std::move(from);
  }

  inline PhoneRegisterRsp& operator=(const PhoneRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneRegisterRsp& operator=(PhoneRegisterRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneRegisterRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneRegisterRsp* internal_default_instance() {
    return reinterpret_cast<const PhoneRegisterRsp*>(
               &_PhoneRegisterRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PhoneRegisterRsp& a, PhoneRegisterRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneRegisterRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneRegisterRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneRegisterRsp* New() const final {
    return CreateMaybeMessage<PhoneRegisterRsp>(nullptr);
  }

  PhoneRegisterRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneRegisterRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneRegisterRsp& from);
  void MergeFrom(const PhoneRegisterRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneRegisterRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.PhoneRegisterRsp";
  }
  protected:
  explicit PhoneRegisterRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.PhoneRegisterRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PhoneLoginReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.PhoneLoginReq) */ {
 public:
  inline PhoneLoginReq() : PhoneLoginReq(nullptr) {};
  virtual ~PhoneLoginReq();

  PhoneLoginReq(const PhoneLoginReq& from);
  PhoneLoginReq(PhoneLoginReq&& from) noexcept
    : PhoneLoginReq() {
    *this = ::std::move(from);
  }

  inline PhoneLoginReq& operator=(const PhoneLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneLoginReq& operator=(PhoneLoginReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneLoginReq* internal_default_instance() {
    return reinterpret_cast<const PhoneLoginReq*>(
               &_PhoneLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PhoneLoginReq& a, PhoneLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneLoginReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneLoginReq* New() const final {
    return CreateMaybeMessage<PhoneLoginReq>(nullptr);
  }

  PhoneLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneLoginReq& from);
  void MergeFrom(const PhoneLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.PhoneLoginReq";
  }
  protected:
  explicit PhoneLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kPhoneNumberFieldNumber = 2,
    kVerifyCodeIdFieldNumber = 3,
    kVerifyCodeFieldNumber = 4,
    kPasswordFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string phone_number = 2;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phone_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phone_number(
      std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string verify_code_id = 3;
  bool has_verify_code_id() const;
  private:
  bool _internal_has_verify_code_id() const;
  public:
  void clear_verify_code_id();
  const std::string& verify_code_id() const;
  void set_verify_code_id(const std::string& value);
  void set_verify_code_id(std::string&& value);
  void set_verify_code_id(const char* value);
  void set_verify_code_id(const char* value, size_t size);
  std::string* mutable_verify_code_id();
  std::string* release_verify_code_id();
  void set_allocated_verify_code_id(std::string* verify_code_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code_id(
      std::string* verify_code_id);
  private:
  const std::string& _internal_verify_code_id() const;
  void _internal_set_verify_code_id(const std::string& value);
  std::string* _internal_mutable_verify_code_id();
  public:

  // string verify_code = 4;
  bool has_verify_code() const;
  private:
  bool _internal_has_verify_code() const;
  public:
  void clear_verify_code();
  const std::string& verify_code() const;
  void set_verify_code(const std::string& value);
  void set_verify_code(std::string&& value);
  void set_verify_code(const char* value);
  void set_verify_code(const char* value, size_t size);
  std::string* mutable_verify_code();
  std::string* release_verify_code();
  void set_allocated_verify_code(std::string* verify_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_verify_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_verify_code(
      std::string* verify_code);
  private:
  const std::string& _internal_verify_code() const;
  void _internal_set_verify_code(const std::string& value);
  std::string* _internal_mutable_verify_code();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:lbk.PhoneLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PhoneLoginRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.PhoneLoginRsp) */ {
 public:
  inline PhoneLoginRsp() : PhoneLoginRsp(nullptr) {};
  virtual ~PhoneLoginRsp();

  PhoneLoginRsp(const PhoneLoginRsp& from);
  PhoneLoginRsp(PhoneLoginRsp&& from) noexcept
    : PhoneLoginRsp() {
    *this = ::std::move(from);
  }

  inline PhoneLoginRsp& operator=(const PhoneLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneLoginRsp& operator=(PhoneLoginRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneLoginRsp* internal_default_instance() {
    return reinterpret_cast<const PhoneLoginRsp*>(
               &_PhoneLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PhoneLoginRsp& a, PhoneLoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneLoginRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneLoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneLoginRsp* New() const final {
    return CreateMaybeMessage<PhoneLoginRsp>(nullptr);
  }

  PhoneLoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneLoginRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneLoginRsp& from);
  void MergeFrom(const PhoneLoginRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneLoginRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.PhoneLoginRsp";
  }
  protected:
  explicit PhoneLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kLoginSessionIdFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string login_session_id = 4;
  void clear_login_session_id();
  const std::string& login_session_id() const;
  void set_login_session_id(const std::string& value);
  void set_login_session_id(std::string&& value);
  void set_login_session_id(const char* value);
  void set_login_session_id(const char* value, size_t size);
  std::string* mutable_login_session_id();
  std::string* release_login_session_id();
  void set_allocated_login_session_id(std::string* login_session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_session_id(
      std::string* login_session_id);
  private:
  const std::string& _internal_login_session_id() const;
  void _internal_set_login_session_id(const std::string& value);
  std::string* _internal_mutable_login_session_id();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.PhoneLoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_session_id_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetUserInfoReq) */ {
 public:
  inline GetUserInfoReq() : GetUserInfoReq(nullptr) {};
  virtual ~GetUserInfoReq();

  GetUserInfoReq(const GetUserInfoReq& from);
  GetUserInfoReq(GetUserInfoReq&& from) noexcept
    : GetUserInfoReq() {
    *this = ::std::move(from);
  }

  inline GetUserInfoReq& operator=(const GetUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInfoReq& operator=(GetUserInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoReq*>(
               &_GetUserInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetUserInfoReq& a, GetUserInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfoReq* New() const final {
    return CreateMaybeMessage<GetUserInfoReq>(nullptr);
  }

  GetUserInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserInfoReq& from);
  void MergeFrom(const GetUserInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetUserInfoReq";
  }
  protected:
  explicit GetUserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetUserInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetUserInfoRsp) */ {
 public:
  inline GetUserInfoRsp() : GetUserInfoRsp(nullptr) {};
  virtual ~GetUserInfoRsp();

  GetUserInfoRsp(const GetUserInfoRsp& from);
  GetUserInfoRsp(GetUserInfoRsp&& from) noexcept
    : GetUserInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetUserInfoRsp& operator=(const GetUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInfoRsp& operator=(GetUserInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoRsp*>(
               &_GetUserInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetUserInfoRsp& a, GetUserInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfoRsp* New() const final {
    return CreateMaybeMessage<GetUserInfoRsp>(nullptr);
  }

  GetUserInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserInfoRsp& from);
  void MergeFrom(const GetUserInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetUserInfoRsp";
  }
  protected:
  explicit GetUserInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kUserInfoFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .lbk.UserInfo user_info = 4;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::lbk::UserInfo& user_info() const;
  ::lbk::UserInfo* release_user_info();
  ::lbk::UserInfo* mutable_user_info();
  void set_allocated_user_info(::lbk::UserInfo* user_info);
  private:
  const ::lbk::UserInfo& _internal_user_info() const;
  ::lbk::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::lbk::UserInfo* user_info);
  ::lbk::UserInfo* unsafe_arena_release_user_info();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetUserInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::lbk::UserInfo* user_info_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetMultiUserInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetMultiUserInfoReq) */ {
 public:
  inline GetMultiUserInfoReq() : GetMultiUserInfoReq(nullptr) {};
  virtual ~GetMultiUserInfoReq();

  GetMultiUserInfoReq(const GetMultiUserInfoReq& from);
  GetMultiUserInfoReq(GetMultiUserInfoReq&& from) noexcept
    : GetMultiUserInfoReq() {
    *this = ::std::move(from);
  }

  inline GetMultiUserInfoReq& operator=(const GetMultiUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMultiUserInfoReq& operator=(GetMultiUserInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMultiUserInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMultiUserInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetMultiUserInfoReq*>(
               &_GetMultiUserInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetMultiUserInfoReq& a, GetMultiUserInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMultiUserInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMultiUserInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMultiUserInfoReq* New() const final {
    return CreateMaybeMessage<GetMultiUserInfoReq>(nullptr);
  }

  GetMultiUserInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMultiUserInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMultiUserInfoReq& from);
  void MergeFrom(const GetMultiUserInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultiUserInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetMultiUserInfoReq";
  }
  protected:
  explicit GetMultiUserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersIdFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated string users_id = 2;
  int users_id_size() const;
  private:
  int _internal_users_id_size() const;
  public:
  void clear_users_id();
  const std::string& users_id(int index) const;
  std::string* mutable_users_id(int index);
  void set_users_id(int index, const std::string& value);
  void set_users_id(int index, std::string&& value);
  void set_users_id(int index, const char* value);
  void set_users_id(int index, const char* value, size_t size);
  std::string* add_users_id();
  void add_users_id(const std::string& value);
  void add_users_id(std::string&& value);
  void add_users_id(const char* value);
  void add_users_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& users_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_users_id();
  private:
  const std::string& _internal_users_id(int index) const;
  std::string* _internal_add_users_id();
  public:

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetMultiUserInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> users_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse, 
    std::string, ::lbk::UserInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse, 
    std::string, ::lbk::UserInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse();
  GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse& other);
  static const GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse*>(&_GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lbk.GetMultiUserInfoRsp.UsersInfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class GetMultiUserInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.GetMultiUserInfoRsp) */ {
 public:
  inline GetMultiUserInfoRsp() : GetMultiUserInfoRsp(nullptr) {};
  virtual ~GetMultiUserInfoRsp();

  GetMultiUserInfoRsp(const GetMultiUserInfoRsp& from);
  GetMultiUserInfoRsp(GetMultiUserInfoRsp&& from) noexcept
    : GetMultiUserInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetMultiUserInfoRsp& operator=(const GetMultiUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMultiUserInfoRsp& operator=(GetMultiUserInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMultiUserInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMultiUserInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetMultiUserInfoRsp*>(
               &_GetMultiUserInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetMultiUserInfoRsp& a, GetMultiUserInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMultiUserInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMultiUserInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMultiUserInfoRsp* New() const final {
    return CreateMaybeMessage<GetMultiUserInfoRsp>(nullptr);
  }

  GetMultiUserInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMultiUserInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMultiUserInfoRsp& from);
  void MergeFrom(const GetMultiUserInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultiUserInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.GetMultiUserInfoRsp";
  }
  protected:
  explicit GetMultiUserInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUsersInfoFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // map<string, .lbk.UserInfo> users_info = 4;
  int users_info_size() const;
  private:
  int _internal_users_info_size() const;
  public:
  void clear_users_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >&
      _internal_users_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >*
      _internal_mutable_users_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >&
      users_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >*
      mutable_users_info();

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.GetMultiUserInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse,
      std::string, ::lbk::UserInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > users_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserAvatarReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserAvatarReq) */ {
 public:
  inline SetUserAvatarReq() : SetUserAvatarReq(nullptr) {};
  virtual ~SetUserAvatarReq();

  SetUserAvatarReq(const SetUserAvatarReq& from);
  SetUserAvatarReq(SetUserAvatarReq&& from) noexcept
    : SetUserAvatarReq() {
    *this = ::std::move(from);
  }

  inline SetUserAvatarReq& operator=(const SetUserAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserAvatarReq& operator=(SetUserAvatarReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserAvatarReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserAvatarReq* internal_default_instance() {
    return reinterpret_cast<const SetUserAvatarReq*>(
               &_SetUserAvatarReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetUserAvatarReq& a, SetUserAvatarReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserAvatarReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserAvatarReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserAvatarReq* New() const final {
    return CreateMaybeMessage<SetUserAvatarReq>(nullptr);
  }

  SetUserAvatarReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserAvatarReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserAvatarReq& from);
  void MergeFrom(const SetUserAvatarReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserAvatarReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserAvatarReq";
  }
  protected:
  explicit SetUserAvatarReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kAvatarFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bytes avatar = 4;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avatar(
      std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserAvatarReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserAvatarRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserAvatarRsp) */ {
 public:
  inline SetUserAvatarRsp() : SetUserAvatarRsp(nullptr) {};
  virtual ~SetUserAvatarRsp();

  SetUserAvatarRsp(const SetUserAvatarRsp& from);
  SetUserAvatarRsp(SetUserAvatarRsp&& from) noexcept
    : SetUserAvatarRsp() {
    *this = ::std::move(from);
  }

  inline SetUserAvatarRsp& operator=(const SetUserAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserAvatarRsp& operator=(SetUserAvatarRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserAvatarRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserAvatarRsp*>(
               &_SetUserAvatarRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetUserAvatarRsp& a, SetUserAvatarRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserAvatarRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserAvatarRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserAvatarRsp* New() const final {
    return CreateMaybeMessage<SetUserAvatarRsp>(nullptr);
  }

  SetUserAvatarRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserAvatarRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserAvatarRsp& from);
  void MergeFrom(const SetUserAvatarRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserAvatarRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserAvatarRsp";
  }
  protected:
  explicit SetUserAvatarRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserAvatarRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserNicknameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserNicknameReq) */ {
 public:
  inline SetUserNicknameReq() : SetUserNicknameReq(nullptr) {};
  virtual ~SetUserNicknameReq();

  SetUserNicknameReq(const SetUserNicknameReq& from);
  SetUserNicknameReq(SetUserNicknameReq&& from) noexcept
    : SetUserNicknameReq() {
    *this = ::std::move(from);
  }

  inline SetUserNicknameReq& operator=(const SetUserNicknameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserNicknameReq& operator=(SetUserNicknameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserNicknameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserNicknameReq* internal_default_instance() {
    return reinterpret_cast<const SetUserNicknameReq*>(
               &_SetUserNicknameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetUserNicknameReq& a, SetUserNicknameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserNicknameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserNicknameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserNicknameReq* New() const final {
    return CreateMaybeMessage<SetUserNicknameReq>(nullptr);
  }

  SetUserNicknameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserNicknameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserNicknameReq& from);
  void MergeFrom(const SetUserNicknameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserNicknameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserNicknameReq";
  }
  protected:
  explicit SetUserNicknameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kNicknameFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nickname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nickname(
      std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserNicknameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserNicknameRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserNicknameRsp) */ {
 public:
  inline SetUserNicknameRsp() : SetUserNicknameRsp(nullptr) {};
  virtual ~SetUserNicknameRsp();

  SetUserNicknameRsp(const SetUserNicknameRsp& from);
  SetUserNicknameRsp(SetUserNicknameRsp&& from) noexcept
    : SetUserNicknameRsp() {
    *this = ::std::move(from);
  }

  inline SetUserNicknameRsp& operator=(const SetUserNicknameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserNicknameRsp& operator=(SetUserNicknameRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserNicknameRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserNicknameRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserNicknameRsp*>(
               &_SetUserNicknameRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetUserNicknameRsp& a, SetUserNicknameRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserNicknameRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserNicknameRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserNicknameRsp* New() const final {
    return CreateMaybeMessage<SetUserNicknameRsp>(nullptr);
  }

  SetUserNicknameRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserNicknameRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserNicknameRsp& from);
  void MergeFrom(const SetUserNicknameRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserNicknameRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserNicknameRsp";
  }
  protected:
  explicit SetUserNicknameRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserNicknameRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserDescriptionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserDescriptionReq) */ {
 public:
  inline SetUserDescriptionReq() : SetUserDescriptionReq(nullptr) {};
  virtual ~SetUserDescriptionReq();

  SetUserDescriptionReq(const SetUserDescriptionReq& from);
  SetUserDescriptionReq(SetUserDescriptionReq&& from) noexcept
    : SetUserDescriptionReq() {
    *this = ::std::move(from);
  }

  inline SetUserDescriptionReq& operator=(const SetUserDescriptionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserDescriptionReq& operator=(SetUserDescriptionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserDescriptionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserDescriptionReq* internal_default_instance() {
    return reinterpret_cast<const SetUserDescriptionReq*>(
               &_SetUserDescriptionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetUserDescriptionReq& a, SetUserDescriptionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserDescriptionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserDescriptionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserDescriptionReq* New() const final {
    return CreateMaybeMessage<SetUserDescriptionReq>(nullptr);
  }

  SetUserDescriptionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserDescriptionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserDescriptionReq& from);
  void MergeFrom(const SetUserDescriptionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserDescriptionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserDescriptionReq";
  }
  protected:
  explicit SetUserDescriptionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kDescriptionFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserDescriptionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserDescriptionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserDescriptionRsp) */ {
 public:
  inline SetUserDescriptionRsp() : SetUserDescriptionRsp(nullptr) {};
  virtual ~SetUserDescriptionRsp();

  SetUserDescriptionRsp(const SetUserDescriptionRsp& from);
  SetUserDescriptionRsp(SetUserDescriptionRsp&& from) noexcept
    : SetUserDescriptionRsp() {
    *this = ::std::move(from);
  }

  inline SetUserDescriptionRsp& operator=(const SetUserDescriptionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserDescriptionRsp& operator=(SetUserDescriptionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserDescriptionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserDescriptionRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserDescriptionRsp*>(
               &_SetUserDescriptionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetUserDescriptionRsp& a, SetUserDescriptionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserDescriptionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserDescriptionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserDescriptionRsp* New() const final {
    return CreateMaybeMessage<SetUserDescriptionRsp>(nullptr);
  }

  SetUserDescriptionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserDescriptionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserDescriptionRsp& from);
  void MergeFrom(const SetUserDescriptionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserDescriptionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserDescriptionRsp";
  }
  protected:
  explicit SetUserDescriptionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserDescriptionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserPhoneNumberReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserPhoneNumberReq) */ {
 public:
  inline SetUserPhoneNumberReq() : SetUserPhoneNumberReq(nullptr) {};
  virtual ~SetUserPhoneNumberReq();

  SetUserPhoneNumberReq(const SetUserPhoneNumberReq& from);
  SetUserPhoneNumberReq(SetUserPhoneNumberReq&& from) noexcept
    : SetUserPhoneNumberReq() {
    *this = ::std::move(from);
  }

  inline SetUserPhoneNumberReq& operator=(const SetUserPhoneNumberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserPhoneNumberReq& operator=(SetUserPhoneNumberReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserPhoneNumberReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserPhoneNumberReq* internal_default_instance() {
    return reinterpret_cast<const SetUserPhoneNumberReq*>(
               &_SetUserPhoneNumberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SetUserPhoneNumberReq& a, SetUserPhoneNumberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserPhoneNumberReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserPhoneNumberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserPhoneNumberReq* New() const final {
    return CreateMaybeMessage<SetUserPhoneNumberReq>(nullptr);
  }

  SetUserPhoneNumberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserPhoneNumberReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserPhoneNumberReq& from);
  void MergeFrom(const SetUserPhoneNumberReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserPhoneNumberReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserPhoneNumberReq";
  }
  protected:
  explicit SetUserPhoneNumberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kPhoneNumberFieldNumber = 4,
    kPhoneVerifyCodeIdFieldNumber = 5,
    kPhoneVerifyCodeFieldNumber = 6,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string phone_number = 4;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phone_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phone_number(
      std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string phone_verify_code_id = 5;
  void clear_phone_verify_code_id();
  const std::string& phone_verify_code_id() const;
  void set_phone_verify_code_id(const std::string& value);
  void set_phone_verify_code_id(std::string&& value);
  void set_phone_verify_code_id(const char* value);
  void set_phone_verify_code_id(const char* value, size_t size);
  std::string* mutable_phone_verify_code_id();
  std::string* release_phone_verify_code_id();
  void set_allocated_phone_verify_code_id(std::string* phone_verify_code_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phone_verify_code_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phone_verify_code_id(
      std::string* phone_verify_code_id);
  private:
  const std::string& _internal_phone_verify_code_id() const;
  void _internal_set_phone_verify_code_id(const std::string& value);
  std::string* _internal_mutable_phone_verify_code_id();
  public:

  // string phone_verify_code = 6;
  void clear_phone_verify_code();
  const std::string& phone_verify_code() const;
  void set_phone_verify_code(const std::string& value);
  void set_phone_verify_code(std::string&& value);
  void set_phone_verify_code(const char* value);
  void set_phone_verify_code(const char* value, size_t size);
  std::string* mutable_phone_verify_code();
  std::string* release_phone_verify_code();
  void set_allocated_phone_verify_code(std::string* phone_verify_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phone_verify_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phone_verify_code(
      std::string* phone_verify_code);
  private:
  const std::string& _internal_phone_verify_code() const;
  void _internal_set_phone_verify_code(const std::string& value);
  std::string* _internal_mutable_phone_verify_code();
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserPhoneNumberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_verify_code_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_verify_code_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SetUserPhoneNumberRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbk.SetUserPhoneNumberRsp) */ {
 public:
  inline SetUserPhoneNumberRsp() : SetUserPhoneNumberRsp(nullptr) {};
  virtual ~SetUserPhoneNumberRsp();

  SetUserPhoneNumberRsp(const SetUserPhoneNumberRsp& from);
  SetUserPhoneNumberRsp(SetUserPhoneNumberRsp&& from) noexcept
    : SetUserPhoneNumberRsp() {
    *this = ::std::move(from);
  }

  inline SetUserPhoneNumberRsp& operator=(const SetUserPhoneNumberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserPhoneNumberRsp& operator=(SetUserPhoneNumberRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetUserPhoneNumberRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetUserPhoneNumberRsp* internal_default_instance() {
    return reinterpret_cast<const SetUserPhoneNumberRsp*>(
               &_SetUserPhoneNumberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetUserPhoneNumberRsp& a, SetUserPhoneNumberRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserPhoneNumberRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserPhoneNumberRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserPhoneNumberRsp* New() const final {
    return CreateMaybeMessage<SetUserPhoneNumberRsp>(nullptr);
  }

  SetUserPhoneNumberRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserPhoneNumberRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetUserPhoneNumberRsp& from);
  void MergeFrom(const SetUserPhoneNumberRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserPhoneNumberRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbk.SetUserPhoneNumberRsp";
  }
  protected:
  explicit SetUserPhoneNumberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbk.SetUserPhoneNumberRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================

class UserService_Stub;

class UserService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserService() {};
 public:
  virtual ~UserService();

  typedef UserService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void UserRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::UserRegisterReq* request,
                       ::lbk::UserRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void UserLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::UserLoginReq* request,
                       ::lbk::UserLoginRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPhoneVerifyCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::PhoneVerifyCodeReq* request,
                       ::lbk::PhoneVerifyCodeRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PhoneRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::PhoneRegisterReq* request,
                       ::lbk::PhoneRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PhoneLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::PhoneLoginReq* request,
                       ::lbk::PhoneLoginRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetUserInfoReq* request,
                       ::lbk::GetUserInfoRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMultiUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetMultiUserInfoReq* request,
                       ::lbk::GetMultiUserInfoRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserAvatarReq* request,
                       ::lbk::SetUserAvatarRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserNickname(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserNicknameReq* request,
                       ::lbk::SetUserNicknameRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserDescription(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserDescriptionReq* request,
                       ::lbk::SetUserDescriptionRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserPhoneNumber(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserPhoneNumberReq* request,
                       ::lbk::SetUserPhoneNumberRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService);
};

class UserService_Stub : public UserService {
 public:
  UserService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserService ------------------------------------------

  void UserRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::UserRegisterReq* request,
                       ::lbk::UserRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  void UserLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::UserLoginReq* request,
                       ::lbk::UserLoginRsp* response,
                       ::google::protobuf::Closure* done);
  void GetPhoneVerifyCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::PhoneVerifyCodeReq* request,
                       ::lbk::PhoneVerifyCodeRsp* response,
                       ::google::protobuf::Closure* done);
  void PhoneRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::PhoneRegisterReq* request,
                       ::lbk::PhoneRegisterRsp* response,
                       ::google::protobuf::Closure* done);
  void PhoneLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::PhoneLoginReq* request,
                       ::lbk::PhoneLoginRsp* response,
                       ::google::protobuf::Closure* done);
  void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetUserInfoReq* request,
                       ::lbk::GetUserInfoRsp* response,
                       ::google::protobuf::Closure* done);
  void GetMultiUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::GetMultiUserInfoReq* request,
                       ::lbk::GetMultiUserInfoRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserAvatarReq* request,
                       ::lbk::SetUserAvatarRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserNickname(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserNicknameReq* request,
                       ::lbk::SetUserNicknameRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserDescription(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserDescriptionReq* request,
                       ::lbk::SetUserDescriptionRsp* response,
                       ::google::protobuf::Closure* done);
  void SetUserPhoneNumber(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::lbk::SetUserPhoneNumberReq* request,
                       ::lbk::SetUserPhoneNumberRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegisterReq

// string request_id = 1;
inline void UserRegisterReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterReq.request_id)
  return _internal_request_id();
}
inline void UserRegisterReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterReq.request_id)
}
inline std::string* UserRegisterReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.UserRegisterReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& UserRegisterReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void UserRegisterReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserRegisterReq.request_id)
}
inline void UserRegisterReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserRegisterReq.request_id)
}
inline void UserRegisterReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserRegisterReq.request_id)
}
inline std::string* UserRegisterReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.UserRegisterReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserRegisterReq.request_id)
}
inline std::string* UserRegisterReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserRegisterReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRegisterReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserRegisterReq.request_id)
}

// string nickname = 2;
inline void UserRegisterReq::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterReq::nickname() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterReq.nickname)
  return _internal_nickname();
}
inline void UserRegisterReq::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterReq.nickname)
}
inline std::string* UserRegisterReq::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:lbk.UserRegisterReq.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& UserRegisterReq::_internal_nickname() const {
  return nickname_.Get();
}
inline void UserRegisterReq::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterReq::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserRegisterReq.nickname)
}
inline void UserRegisterReq::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserRegisterReq.nickname)
}
inline void UserRegisterReq::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserRegisterReq.nickname)
}
inline std::string* UserRegisterReq::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterReq::release_nickname() {
  // @@protoc_insertion_point(field_release:lbk.UserRegisterReq.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterReq::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserRegisterReq.nickname)
}
inline std::string* UserRegisterReq::unsafe_arena_release_nickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserRegisterReq.nickname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nickname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRegisterReq::unsafe_arena_set_allocated_nickname(
    std::string* nickname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nickname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserRegisterReq.nickname)
}

// string password = 3;
inline void UserRegisterReq::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterReq::password() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterReq.password)
  return _internal_password();
}
inline void UserRegisterReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterReq.password)
}
inline std::string* UserRegisterReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:lbk.UserRegisterReq.password)
  return _internal_mutable_password();
}
inline const std::string& UserRegisterReq::_internal_password() const {
  return password_.Get();
}
inline void UserRegisterReq::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterReq::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserRegisterReq.password)
}
inline void UserRegisterReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserRegisterReq.password)
}
inline void UserRegisterReq::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserRegisterReq.password)
}
inline std::string* UserRegisterReq::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:lbk.UserRegisterReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserRegisterReq.password)
}
inline std::string* UserRegisterReq::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserRegisterReq.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRegisterReq::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserRegisterReq.password)
}

// string verify_code_id = 4;
inline bool UserRegisterReq::_internal_has_verify_code_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserRegisterReq::has_verify_code_id() const {
  return _internal_has_verify_code_id();
}
inline void UserRegisterReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRegisterReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterReq.verify_code_id)
  return _internal_verify_code_id();
}
inline void UserRegisterReq::set_verify_code_id(const std::string& value) {
  _internal_set_verify_code_id(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterReq.verify_code_id)
}
inline std::string* UserRegisterReq::mutable_verify_code_id() {
  // @@protoc_insertion_point(field_mutable:lbk.UserRegisterReq.verify_code_id)
  return _internal_mutable_verify_code_id();
}
inline const std::string& UserRegisterReq::_internal_verify_code_id() const {
  return verify_code_id_.Get();
}
inline void UserRegisterReq::_internal_set_verify_code_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterReq::set_verify_code_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserRegisterReq.verify_code_id)
}
inline void UserRegisterReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserRegisterReq.verify_code_id)
}
inline void UserRegisterReq::set_verify_code_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserRegisterReq.verify_code_id)
}
inline std::string* UserRegisterReq::_internal_mutable_verify_code_id() {
  _has_bits_[0] |= 0x00000001u;
  return verify_code_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:lbk.UserRegisterReq.verify_code_id)
  if (!_internal_has_verify_code_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterReq::set_allocated_verify_code_id(std::string* verify_code_id) {
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserRegisterReq.verify_code_id)
}
inline std::string* UserRegisterReq::unsafe_arena_release_verify_code_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserRegisterReq.verify_code_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRegisterReq::unsafe_arena_set_allocated_verify_code_id(
    std::string* verify_code_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserRegisterReq.verify_code_id)
}

// string verify_code = 5;
inline bool UserRegisterReq::_internal_has_verify_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserRegisterReq::has_verify_code() const {
  return _internal_has_verify_code();
}
inline void UserRegisterReq::clear_verify_code() {
  verify_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserRegisterReq::verify_code() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterReq.verify_code)
  return _internal_verify_code();
}
inline void UserRegisterReq::set_verify_code(const std::string& value) {
  _internal_set_verify_code(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterReq.verify_code)
}
inline std::string* UserRegisterReq::mutable_verify_code() {
  // @@protoc_insertion_point(field_mutable:lbk.UserRegisterReq.verify_code)
  return _internal_mutable_verify_code();
}
inline const std::string& UserRegisterReq::_internal_verify_code() const {
  return verify_code_.Get();
}
inline void UserRegisterReq::_internal_set_verify_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterReq::set_verify_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserRegisterReq.verify_code)
}
inline void UserRegisterReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserRegisterReq.verify_code)
}
inline void UserRegisterReq::set_verify_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserRegisterReq.verify_code)
}
inline std::string* UserRegisterReq::_internal_mutable_verify_code() {
  _has_bits_[0] |= 0x00000002u;
  return verify_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:lbk.UserRegisterReq.verify_code)
  if (!_internal_has_verify_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterReq::set_allocated_verify_code(std::string* verify_code) {
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserRegisterReq.verify_code)
}
inline std::string* UserRegisterReq::unsafe_arena_release_verify_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserRegisterReq.verify_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRegisterReq::unsafe_arena_set_allocated_verify_code(
    std::string* verify_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserRegisterReq.verify_code)
}

// -------------------------------------------------------------------

// UserRegisterRsp

// string request_id = 1;
inline void UserRegisterRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterRsp.request_id)
  return _internal_request_id();
}
inline void UserRegisterRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterRsp.request_id)
}
inline std::string* UserRegisterRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.UserRegisterRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& UserRegisterRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void UserRegisterRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserRegisterRsp.request_id)
}
inline void UserRegisterRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserRegisterRsp.request_id)
}
inline void UserRegisterRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserRegisterRsp.request_id)
}
inline std::string* UserRegisterRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.UserRegisterRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserRegisterRsp.request_id)
}
inline std::string* UserRegisterRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserRegisterRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRegisterRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserRegisterRsp.request_id)
}

// bool success = 2;
inline void UserRegisterRsp::clear_success() {
  success_ = false;
}
inline bool UserRegisterRsp::_internal_success() const {
  return success_;
}
inline bool UserRegisterRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterRsp.success)
  return _internal_success();
}
inline void UserRegisterRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UserRegisterRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterRsp.success)
}

// string errmsg = 3;
inline void UserRegisterRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRegisterRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.UserRegisterRsp.errmsg)
  return _internal_errmsg();
}
inline void UserRegisterRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.UserRegisterRsp.errmsg)
}
inline std::string* UserRegisterRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.UserRegisterRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& UserRegisterRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void UserRegisterRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRegisterRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserRegisterRsp.errmsg)
}
inline void UserRegisterRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserRegisterRsp.errmsg)
}
inline void UserRegisterRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserRegisterRsp.errmsg)
}
inline std::string* UserRegisterRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRegisterRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.UserRegisterRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRegisterRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserRegisterRsp.errmsg)
}
inline std::string* UserRegisterRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserRegisterRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRegisterRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserRegisterRsp.errmsg)
}

// -------------------------------------------------------------------

// UserLoginReq

// string request_id = 1;
inline void UserLoginReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginReq.request_id)
  return _internal_request_id();
}
inline void UserLoginReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginReq.request_id)
}
inline std::string* UserLoginReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& UserLoginReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void UserLoginReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginReq.request_id)
}
inline void UserLoginReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginReq.request_id)
}
inline void UserLoginReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginReq.request_id)
}
inline std::string* UserLoginReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginReq.request_id)
}
inline std::string* UserLoginReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginReq.request_id)
}

// string nickname = 2;
inline void UserLoginReq::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginReq::nickname() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginReq.nickname)
  return _internal_nickname();
}
inline void UserLoginReq::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginReq.nickname)
}
inline std::string* UserLoginReq::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginReq.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& UserLoginReq::_internal_nickname() const {
  return nickname_.Get();
}
inline void UserLoginReq::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginReq::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginReq.nickname)
}
inline void UserLoginReq::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginReq.nickname)
}
inline void UserLoginReq::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginReq.nickname)
}
inline std::string* UserLoginReq::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginReq::release_nickname() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginReq.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginReq::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginReq.nickname)
}
inline std::string* UserLoginReq::unsafe_arena_release_nickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginReq.nickname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nickname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginReq::unsafe_arena_set_allocated_nickname(
    std::string* nickname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nickname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginReq.nickname)
}

// string password = 3;
inline void UserLoginReq::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginReq::password() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginReq.password)
  return _internal_password();
}
inline void UserLoginReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginReq.password)
}
inline std::string* UserLoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginReq.password)
  return _internal_mutable_password();
}
inline const std::string& UserLoginReq::_internal_password() const {
  return password_.Get();
}
inline void UserLoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginReq::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginReq.password)
}
inline void UserLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginReq.password)
}
inline void UserLoginReq::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginReq.password)
}
inline std::string* UserLoginReq::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginReq.password)
}
inline std::string* UserLoginReq::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginReq.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginReq::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginReq.password)
}

// string verify_code_id = 4;
inline bool UserLoginReq::_internal_has_verify_code_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserLoginReq::has_verify_code_id() const {
  return _internal_has_verify_code_id();
}
inline void UserLoginReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserLoginReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginReq.verify_code_id)
  return _internal_verify_code_id();
}
inline void UserLoginReq::set_verify_code_id(const std::string& value) {
  _internal_set_verify_code_id(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginReq.verify_code_id)
}
inline std::string* UserLoginReq::mutable_verify_code_id() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginReq.verify_code_id)
  return _internal_mutable_verify_code_id();
}
inline const std::string& UserLoginReq::_internal_verify_code_id() const {
  return verify_code_id_.Get();
}
inline void UserLoginReq::_internal_set_verify_code_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginReq::set_verify_code_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginReq.verify_code_id)
}
inline void UserLoginReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginReq.verify_code_id)
}
inline void UserLoginReq::set_verify_code_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginReq.verify_code_id)
}
inline std::string* UserLoginReq::_internal_mutable_verify_code_id() {
  _has_bits_[0] |= 0x00000001u;
  return verify_code_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginReq.verify_code_id)
  if (!_internal_has_verify_code_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginReq::set_allocated_verify_code_id(std::string* verify_code_id) {
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginReq.verify_code_id)
}
inline std::string* UserLoginReq::unsafe_arena_release_verify_code_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginReq.verify_code_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginReq::unsafe_arena_set_allocated_verify_code_id(
    std::string* verify_code_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginReq.verify_code_id)
}

// string verify_code = 5;
inline bool UserLoginReq::_internal_has_verify_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserLoginReq::has_verify_code() const {
  return _internal_has_verify_code();
}
inline void UserLoginReq::clear_verify_code() {
  verify_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserLoginReq::verify_code() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginReq.verify_code)
  return _internal_verify_code();
}
inline void UserLoginReq::set_verify_code(const std::string& value) {
  _internal_set_verify_code(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginReq.verify_code)
}
inline std::string* UserLoginReq::mutable_verify_code() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginReq.verify_code)
  return _internal_mutable_verify_code();
}
inline const std::string& UserLoginReq::_internal_verify_code() const {
  return verify_code_.Get();
}
inline void UserLoginReq::_internal_set_verify_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginReq::set_verify_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginReq.verify_code)
}
inline void UserLoginReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginReq.verify_code)
}
inline void UserLoginReq::set_verify_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginReq.verify_code)
}
inline std::string* UserLoginReq::_internal_mutable_verify_code() {
  _has_bits_[0] |= 0x00000002u;
  return verify_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginReq.verify_code)
  if (!_internal_has_verify_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginReq::set_allocated_verify_code(std::string* verify_code) {
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginReq.verify_code)
}
inline std::string* UserLoginReq::unsafe_arena_release_verify_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginReq.verify_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginReq::unsafe_arena_set_allocated_verify_code(
    std::string* verify_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginReq.verify_code)
}

// -------------------------------------------------------------------

// UserLoginRsp

// string request_id = 1;
inline void UserLoginRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginRsp.request_id)
  return _internal_request_id();
}
inline void UserLoginRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginRsp.request_id)
}
inline std::string* UserLoginRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& UserLoginRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void UserLoginRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginRsp.request_id)
}
inline void UserLoginRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginRsp.request_id)
}
inline void UserLoginRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginRsp.request_id)
}
inline std::string* UserLoginRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginRsp.request_id)
}
inline std::string* UserLoginRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginRsp.request_id)
}

// bool success = 2;
inline void UserLoginRsp::clear_success() {
  success_ = false;
}
inline bool UserLoginRsp::_internal_success() const {
  return success_;
}
inline bool UserLoginRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginRsp.success)
  return _internal_success();
}
inline void UserLoginRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UserLoginRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginRsp.success)
}

// string errmsg = 3;
inline void UserLoginRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginRsp.errmsg)
  return _internal_errmsg();
}
inline void UserLoginRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginRsp.errmsg)
}
inline std::string* UserLoginRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& UserLoginRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void UserLoginRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginRsp.errmsg)
}
inline void UserLoginRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginRsp.errmsg)
}
inline void UserLoginRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginRsp.errmsg)
}
inline std::string* UserLoginRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginRsp.errmsg)
}
inline std::string* UserLoginRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginRsp.errmsg)
}

// string login_session_id = 4;
inline void UserLoginRsp::clear_login_session_id() {
  login_session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginRsp::login_session_id() const {
  // @@protoc_insertion_point(field_get:lbk.UserLoginRsp.login_session_id)
  return _internal_login_session_id();
}
inline void UserLoginRsp::set_login_session_id(const std::string& value) {
  _internal_set_login_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.UserLoginRsp.login_session_id)
}
inline std::string* UserLoginRsp::mutable_login_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.UserLoginRsp.login_session_id)
  return _internal_mutable_login_session_id();
}
inline const std::string& UserLoginRsp::_internal_login_session_id() const {
  return login_session_id_.Get();
}
inline void UserLoginRsp::_internal_set_login_session_id(const std::string& value) {
  
  login_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginRsp::set_login_session_id(std::string&& value) {
  
  login_session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.UserLoginRsp.login_session_id)
}
inline void UserLoginRsp::set_login_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.UserLoginRsp.login_session_id)
}
inline void UserLoginRsp::set_login_session_id(const char* value,
    size_t size) {
  
  login_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.UserLoginRsp.login_session_id)
}
inline std::string* UserLoginRsp::_internal_mutable_login_session_id() {
  
  return login_session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginRsp::release_login_session_id() {
  // @@protoc_insertion_point(field_release:lbk.UserLoginRsp.login_session_id)
  return login_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginRsp::set_allocated_login_session_id(std::string* login_session_id) {
  if (login_session_id != nullptr) {
    
  } else {
    
  }
  login_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.UserLoginRsp.login_session_id)
}
inline std::string* UserLoginRsp::unsafe_arena_release_login_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.UserLoginRsp.login_session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginRsp::unsafe_arena_set_allocated_login_session_id(
    std::string* login_session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_session_id != nullptr) {
    
  } else {
    
  }
  login_session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.UserLoginRsp.login_session_id)
}

// -------------------------------------------------------------------

// PhoneVerifyCodeReq

// string request_id = 1;
inline void PhoneVerifyCodeReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneVerifyCodeReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneVerifyCodeReq.request_id)
  return _internal_request_id();
}
inline void PhoneVerifyCodeReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneVerifyCodeReq.request_id)
}
inline std::string* PhoneVerifyCodeReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneVerifyCodeReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& PhoneVerifyCodeReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void PhoneVerifyCodeReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneVerifyCodeReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneVerifyCodeReq.request_id)
}
inline void PhoneVerifyCodeReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneVerifyCodeReq.request_id)
}
inline void PhoneVerifyCodeReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneVerifyCodeReq.request_id)
}
inline std::string* PhoneVerifyCodeReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneVerifyCodeReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneVerifyCodeReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneVerifyCodeReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneVerifyCodeReq.request_id)
}
inline std::string* PhoneVerifyCodeReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneVerifyCodeReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneVerifyCodeReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneVerifyCodeReq.request_id)
}

// string phone_number = 2;
inline void PhoneVerifyCodeReq::clear_phone_number() {
  phone_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneVerifyCodeReq::phone_number() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneVerifyCodeReq.phone_number)
  return _internal_phone_number();
}
inline void PhoneVerifyCodeReq::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneVerifyCodeReq.phone_number)
}
inline std::string* PhoneVerifyCodeReq::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneVerifyCodeReq.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& PhoneVerifyCodeReq::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void PhoneVerifyCodeReq::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneVerifyCodeReq::set_phone_number(std::string&& value) {
  
  phone_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneVerifyCodeReq.phone_number)
}
inline void PhoneVerifyCodeReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneVerifyCodeReq.phone_number)
}
inline void PhoneVerifyCodeReq::set_phone_number(const char* value,
    size_t size) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneVerifyCodeReq.phone_number)
}
inline std::string* PhoneVerifyCodeReq::_internal_mutable_phone_number() {
  
  return phone_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneVerifyCodeReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:lbk.PhoneVerifyCodeReq.phone_number)
  return phone_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneVerifyCodeReq::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneVerifyCodeReq.phone_number)
}
inline std::string* PhoneVerifyCodeReq::unsafe_arena_release_phone_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneVerifyCodeReq.phone_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phone_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneVerifyCodeReq::unsafe_arena_set_allocated_phone_number(
    std::string* phone_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phone_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneVerifyCodeReq.phone_number)
}

// string password = 3;
inline void PhoneVerifyCodeReq::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneVerifyCodeReq::password() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneVerifyCodeReq.password)
  return _internal_password();
}
inline void PhoneVerifyCodeReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneVerifyCodeReq.password)
}
inline std::string* PhoneVerifyCodeReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneVerifyCodeReq.password)
  return _internal_mutable_password();
}
inline const std::string& PhoneVerifyCodeReq::_internal_password() const {
  return password_.Get();
}
inline void PhoneVerifyCodeReq::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneVerifyCodeReq::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneVerifyCodeReq.password)
}
inline void PhoneVerifyCodeReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneVerifyCodeReq.password)
}
inline void PhoneVerifyCodeReq::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneVerifyCodeReq.password)
}
inline std::string* PhoneVerifyCodeReq::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneVerifyCodeReq::release_password() {
  // @@protoc_insertion_point(field_release:lbk.PhoneVerifyCodeReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneVerifyCodeReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneVerifyCodeReq.password)
}
inline std::string* PhoneVerifyCodeReq::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneVerifyCodeReq.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneVerifyCodeReq::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneVerifyCodeReq.password)
}

// -------------------------------------------------------------------

// PhoneVerifyCodeRsp

// string request_id = 1;
inline void PhoneVerifyCodeRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneVerifyCodeRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneVerifyCodeRsp.request_id)
  return _internal_request_id();
}
inline void PhoneVerifyCodeRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneVerifyCodeRsp.request_id)
}
inline std::string* PhoneVerifyCodeRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneVerifyCodeRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& PhoneVerifyCodeRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void PhoneVerifyCodeRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneVerifyCodeRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneVerifyCodeRsp.request_id)
}
inline void PhoneVerifyCodeRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneVerifyCodeRsp.request_id)
}
inline void PhoneVerifyCodeRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneVerifyCodeRsp.request_id)
}
inline std::string* PhoneVerifyCodeRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneVerifyCodeRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneVerifyCodeRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneVerifyCodeRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneVerifyCodeRsp.request_id)
}
inline std::string* PhoneVerifyCodeRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneVerifyCodeRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneVerifyCodeRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneVerifyCodeRsp.request_id)
}

// bool success = 2;
inline void PhoneVerifyCodeRsp::clear_success() {
  success_ = false;
}
inline bool PhoneVerifyCodeRsp::_internal_success() const {
  return success_;
}
inline bool PhoneVerifyCodeRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneVerifyCodeRsp.success)
  return _internal_success();
}
inline void PhoneVerifyCodeRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PhoneVerifyCodeRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneVerifyCodeRsp.success)
}

// string errmsg = 3;
inline void PhoneVerifyCodeRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneVerifyCodeRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneVerifyCodeRsp.errmsg)
  return _internal_errmsg();
}
inline void PhoneVerifyCodeRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneVerifyCodeRsp.errmsg)
}
inline std::string* PhoneVerifyCodeRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneVerifyCodeRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PhoneVerifyCodeRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void PhoneVerifyCodeRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneVerifyCodeRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneVerifyCodeRsp.errmsg)
}
inline void PhoneVerifyCodeRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneVerifyCodeRsp.errmsg)
}
inline void PhoneVerifyCodeRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneVerifyCodeRsp.errmsg)
}
inline std::string* PhoneVerifyCodeRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneVerifyCodeRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.PhoneVerifyCodeRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneVerifyCodeRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneVerifyCodeRsp.errmsg)
}
inline std::string* PhoneVerifyCodeRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneVerifyCodeRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneVerifyCodeRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneVerifyCodeRsp.errmsg)
}

// string verify_code_id = 4;
inline bool PhoneVerifyCodeRsp::_internal_has_verify_code_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PhoneVerifyCodeRsp::has_verify_code_id() const {
  return _internal_has_verify_code_id();
}
inline void PhoneVerifyCodeRsp::clear_verify_code_id() {
  verify_code_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneVerifyCodeRsp::verify_code_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneVerifyCodeRsp.verify_code_id)
  return _internal_verify_code_id();
}
inline void PhoneVerifyCodeRsp::set_verify_code_id(const std::string& value) {
  _internal_set_verify_code_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneVerifyCodeRsp.verify_code_id)
}
inline std::string* PhoneVerifyCodeRsp::mutable_verify_code_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneVerifyCodeRsp.verify_code_id)
  return _internal_mutable_verify_code_id();
}
inline const std::string& PhoneVerifyCodeRsp::_internal_verify_code_id() const {
  return verify_code_id_.Get();
}
inline void PhoneVerifyCodeRsp::_internal_set_verify_code_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneVerifyCodeRsp::set_verify_code_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneVerifyCodeRsp.verify_code_id)
}
inline void PhoneVerifyCodeRsp::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneVerifyCodeRsp.verify_code_id)
}
inline void PhoneVerifyCodeRsp::set_verify_code_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneVerifyCodeRsp.verify_code_id)
}
inline std::string* PhoneVerifyCodeRsp::_internal_mutable_verify_code_id() {
  _has_bits_[0] |= 0x00000001u;
  return verify_code_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneVerifyCodeRsp::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneVerifyCodeRsp.verify_code_id)
  if (!_internal_has_verify_code_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneVerifyCodeRsp::set_allocated_verify_code_id(std::string* verify_code_id) {
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneVerifyCodeRsp.verify_code_id)
}
inline std::string* PhoneVerifyCodeRsp::unsafe_arena_release_verify_code_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneVerifyCodeRsp.verify_code_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneVerifyCodeRsp::unsafe_arena_set_allocated_verify_code_id(
    std::string* verify_code_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneVerifyCodeRsp.verify_code_id)
}

// -------------------------------------------------------------------

// PhoneRegisterReq

// string request_id = 1;
inline void PhoneRegisterReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneRegisterReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterReq.request_id)
  return _internal_request_id();
}
inline void PhoneRegisterReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterReq.request_id)
}
inline std::string* PhoneRegisterReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneRegisterReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& PhoneRegisterReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void PhoneRegisterReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneRegisterReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneRegisterReq.request_id)
}
inline void PhoneRegisterReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneRegisterReq.request_id)
}
inline void PhoneRegisterReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneRegisterReq.request_id)
}
inline std::string* PhoneRegisterReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneRegisterReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneRegisterReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneRegisterReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneRegisterReq.request_id)
}
inline std::string* PhoneRegisterReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneRegisterReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneRegisterReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneRegisterReq.request_id)
}

// string phone_number = 2;
inline void PhoneRegisterReq::clear_phone_number() {
  phone_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneRegisterReq::phone_number() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterReq.phone_number)
  return _internal_phone_number();
}
inline void PhoneRegisterReq::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterReq.phone_number)
}
inline std::string* PhoneRegisterReq::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneRegisterReq.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& PhoneRegisterReq::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void PhoneRegisterReq::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneRegisterReq::set_phone_number(std::string&& value) {
  
  phone_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneRegisterReq.phone_number)
}
inline void PhoneRegisterReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneRegisterReq.phone_number)
}
inline void PhoneRegisterReq::set_phone_number(const char* value,
    size_t size) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneRegisterReq.phone_number)
}
inline std::string* PhoneRegisterReq::_internal_mutable_phone_number() {
  
  return phone_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneRegisterReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:lbk.PhoneRegisterReq.phone_number)
  return phone_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneRegisterReq::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneRegisterReq.phone_number)
}
inline std::string* PhoneRegisterReq::unsafe_arena_release_phone_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneRegisterReq.phone_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phone_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneRegisterReq::unsafe_arena_set_allocated_phone_number(
    std::string* phone_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phone_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneRegisterReq.phone_number)
}

// string verify_code_id = 3;
inline bool PhoneRegisterReq::_internal_has_verify_code_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PhoneRegisterReq::has_verify_code_id() const {
  return _internal_has_verify_code_id();
}
inline void PhoneRegisterReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneRegisterReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterReq.verify_code_id)
  return _internal_verify_code_id();
}
inline void PhoneRegisterReq::set_verify_code_id(const std::string& value) {
  _internal_set_verify_code_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterReq.verify_code_id)
}
inline std::string* PhoneRegisterReq::mutable_verify_code_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneRegisterReq.verify_code_id)
  return _internal_mutable_verify_code_id();
}
inline const std::string& PhoneRegisterReq::_internal_verify_code_id() const {
  return verify_code_id_.Get();
}
inline void PhoneRegisterReq::_internal_set_verify_code_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneRegisterReq::set_verify_code_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneRegisterReq.verify_code_id)
}
inline void PhoneRegisterReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneRegisterReq.verify_code_id)
}
inline void PhoneRegisterReq::set_verify_code_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneRegisterReq.verify_code_id)
}
inline std::string* PhoneRegisterReq::_internal_mutable_verify_code_id() {
  _has_bits_[0] |= 0x00000001u;
  return verify_code_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneRegisterReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneRegisterReq.verify_code_id)
  if (!_internal_has_verify_code_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneRegisterReq::set_allocated_verify_code_id(std::string* verify_code_id) {
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneRegisterReq.verify_code_id)
}
inline std::string* PhoneRegisterReq::unsafe_arena_release_verify_code_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneRegisterReq.verify_code_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneRegisterReq::unsafe_arena_set_allocated_verify_code_id(
    std::string* verify_code_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneRegisterReq.verify_code_id)
}

// string verify_code = 4;
inline bool PhoneRegisterReq::_internal_has_verify_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PhoneRegisterReq::has_verify_code() const {
  return _internal_has_verify_code();
}
inline void PhoneRegisterReq::clear_verify_code() {
  verify_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneRegisterReq::verify_code() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterReq.verify_code)
  return _internal_verify_code();
}
inline void PhoneRegisterReq::set_verify_code(const std::string& value) {
  _internal_set_verify_code(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterReq.verify_code)
}
inline std::string* PhoneRegisterReq::mutable_verify_code() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneRegisterReq.verify_code)
  return _internal_mutable_verify_code();
}
inline const std::string& PhoneRegisterReq::_internal_verify_code() const {
  return verify_code_.Get();
}
inline void PhoneRegisterReq::_internal_set_verify_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneRegisterReq::set_verify_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneRegisterReq.verify_code)
}
inline void PhoneRegisterReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneRegisterReq.verify_code)
}
inline void PhoneRegisterReq::set_verify_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneRegisterReq.verify_code)
}
inline std::string* PhoneRegisterReq::_internal_mutable_verify_code() {
  _has_bits_[0] |= 0x00000002u;
  return verify_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneRegisterReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:lbk.PhoneRegisterReq.verify_code)
  if (!_internal_has_verify_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneRegisterReq::set_allocated_verify_code(std::string* verify_code) {
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneRegisterReq.verify_code)
}
inline std::string* PhoneRegisterReq::unsafe_arena_release_verify_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneRegisterReq.verify_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneRegisterReq::unsafe_arena_set_allocated_verify_code(
    std::string* verify_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneRegisterReq.verify_code)
}

// string password = 5;
inline void PhoneRegisterReq::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneRegisterReq::password() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterReq.password)
  return _internal_password();
}
inline void PhoneRegisterReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterReq.password)
}
inline std::string* PhoneRegisterReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneRegisterReq.password)
  return _internal_mutable_password();
}
inline const std::string& PhoneRegisterReq::_internal_password() const {
  return password_.Get();
}
inline void PhoneRegisterReq::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneRegisterReq::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneRegisterReq.password)
}
inline void PhoneRegisterReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneRegisterReq.password)
}
inline void PhoneRegisterReq::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneRegisterReq.password)
}
inline std::string* PhoneRegisterReq::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneRegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:lbk.PhoneRegisterReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneRegisterReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneRegisterReq.password)
}
inline std::string* PhoneRegisterReq::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneRegisterReq.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneRegisterReq::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneRegisterReq.password)
}

// -------------------------------------------------------------------

// PhoneRegisterRsp

// string request_id = 1;
inline void PhoneRegisterRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneRegisterRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterRsp.request_id)
  return _internal_request_id();
}
inline void PhoneRegisterRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterRsp.request_id)
}
inline std::string* PhoneRegisterRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneRegisterRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& PhoneRegisterRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void PhoneRegisterRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneRegisterRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneRegisterRsp.request_id)
}
inline void PhoneRegisterRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneRegisterRsp.request_id)
}
inline void PhoneRegisterRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneRegisterRsp.request_id)
}
inline std::string* PhoneRegisterRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneRegisterRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneRegisterRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneRegisterRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneRegisterRsp.request_id)
}
inline std::string* PhoneRegisterRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneRegisterRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneRegisterRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneRegisterRsp.request_id)
}

// bool success = 2;
inline void PhoneRegisterRsp::clear_success() {
  success_ = false;
}
inline bool PhoneRegisterRsp::_internal_success() const {
  return success_;
}
inline bool PhoneRegisterRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterRsp.success)
  return _internal_success();
}
inline void PhoneRegisterRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PhoneRegisterRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterRsp.success)
}

// string errmsg = 3;
inline void PhoneRegisterRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneRegisterRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneRegisterRsp.errmsg)
  return _internal_errmsg();
}
inline void PhoneRegisterRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneRegisterRsp.errmsg)
}
inline std::string* PhoneRegisterRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneRegisterRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PhoneRegisterRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void PhoneRegisterRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneRegisterRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneRegisterRsp.errmsg)
}
inline void PhoneRegisterRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneRegisterRsp.errmsg)
}
inline void PhoneRegisterRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneRegisterRsp.errmsg)
}
inline std::string* PhoneRegisterRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneRegisterRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.PhoneRegisterRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneRegisterRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneRegisterRsp.errmsg)
}
inline std::string* PhoneRegisterRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneRegisterRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneRegisterRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneRegisterRsp.errmsg)
}

// -------------------------------------------------------------------

// PhoneLoginReq

// string request_id = 1;
inline void PhoneLoginReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneLoginReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginReq.request_id)
  return _internal_request_id();
}
inline void PhoneLoginReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginReq.request_id)
}
inline std::string* PhoneLoginReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& PhoneLoginReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void PhoneLoginReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginReq.request_id)
}
inline void PhoneLoginReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginReq.request_id)
}
inline void PhoneLoginReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginReq.request_id)
}
inline std::string* PhoneLoginReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginReq.request_id)
}
inline std::string* PhoneLoginReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginReq.request_id)
}

// string phone_number = 2;
inline void PhoneLoginReq::clear_phone_number() {
  phone_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneLoginReq::phone_number() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginReq.phone_number)
  return _internal_phone_number();
}
inline void PhoneLoginReq::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginReq.phone_number)
}
inline std::string* PhoneLoginReq::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginReq.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& PhoneLoginReq::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void PhoneLoginReq::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginReq::set_phone_number(std::string&& value) {
  
  phone_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginReq.phone_number)
}
inline void PhoneLoginReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginReq.phone_number)
}
inline void PhoneLoginReq::set_phone_number(const char* value,
    size_t size) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginReq.phone_number)
}
inline std::string* PhoneLoginReq::_internal_mutable_phone_number() {
  
  return phone_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginReq.phone_number)
  return phone_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginReq::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginReq.phone_number)
}
inline std::string* PhoneLoginReq::unsafe_arena_release_phone_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginReq.phone_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phone_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginReq::unsafe_arena_set_allocated_phone_number(
    std::string* phone_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phone_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginReq.phone_number)
}

// string verify_code_id = 3;
inline bool PhoneLoginReq::_internal_has_verify_code_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PhoneLoginReq::has_verify_code_id() const {
  return _internal_has_verify_code_id();
}
inline void PhoneLoginReq::clear_verify_code_id() {
  verify_code_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneLoginReq::verify_code_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginReq.verify_code_id)
  return _internal_verify_code_id();
}
inline void PhoneLoginReq::set_verify_code_id(const std::string& value) {
  _internal_set_verify_code_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginReq.verify_code_id)
}
inline std::string* PhoneLoginReq::mutable_verify_code_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginReq.verify_code_id)
  return _internal_mutable_verify_code_id();
}
inline const std::string& PhoneLoginReq::_internal_verify_code_id() const {
  return verify_code_id_.Get();
}
inline void PhoneLoginReq::_internal_set_verify_code_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginReq::set_verify_code_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginReq.verify_code_id)
}
inline void PhoneLoginReq::set_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginReq.verify_code_id)
}
inline void PhoneLoginReq::set_verify_code_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginReq.verify_code_id)
}
inline std::string* PhoneLoginReq::_internal_mutable_verify_code_id() {
  _has_bits_[0] |= 0x00000001u;
  return verify_code_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginReq::release_verify_code_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginReq.verify_code_id)
  if (!_internal_has_verify_code_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginReq::set_allocated_verify_code_id(std::string* verify_code_id) {
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginReq.verify_code_id)
}
inline std::string* PhoneLoginReq::unsafe_arena_release_verify_code_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginReq.verify_code_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return verify_code_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginReq::unsafe_arena_set_allocated_verify_code_id(
    std::string* verify_code_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_code_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginReq.verify_code_id)
}

// string verify_code = 4;
inline bool PhoneLoginReq::_internal_has_verify_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PhoneLoginReq::has_verify_code() const {
  return _internal_has_verify_code();
}
inline void PhoneLoginReq::clear_verify_code() {
  verify_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneLoginReq::verify_code() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginReq.verify_code)
  return _internal_verify_code();
}
inline void PhoneLoginReq::set_verify_code(const std::string& value) {
  _internal_set_verify_code(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginReq.verify_code)
}
inline std::string* PhoneLoginReq::mutable_verify_code() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginReq.verify_code)
  return _internal_mutable_verify_code();
}
inline const std::string& PhoneLoginReq::_internal_verify_code() const {
  return verify_code_.Get();
}
inline void PhoneLoginReq::_internal_set_verify_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginReq::set_verify_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginReq.verify_code)
}
inline void PhoneLoginReq::set_verify_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginReq.verify_code)
}
inline void PhoneLoginReq::set_verify_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginReq.verify_code)
}
inline std::string* PhoneLoginReq::_internal_mutable_verify_code() {
  _has_bits_[0] |= 0x00000002u;
  return verify_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginReq::release_verify_code() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginReq.verify_code)
  if (!_internal_has_verify_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginReq::set_allocated_verify_code(std::string* verify_code) {
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginReq.verify_code)
}
inline std::string* PhoneLoginReq::unsafe_arena_release_verify_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginReq.verify_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return verify_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginReq::unsafe_arena_set_allocated_verify_code(
    std::string* verify_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (verify_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verify_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      verify_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginReq.verify_code)
}

// string password = 5;
inline void PhoneLoginReq::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneLoginReq::password() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginReq.password)
  return _internal_password();
}
inline void PhoneLoginReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginReq.password)
}
inline std::string* PhoneLoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginReq.password)
  return _internal_mutable_password();
}
inline const std::string& PhoneLoginReq::_internal_password() const {
  return password_.Get();
}
inline void PhoneLoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginReq::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginReq.password)
}
inline void PhoneLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginReq.password)
}
inline void PhoneLoginReq::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginReq.password)
}
inline std::string* PhoneLoginReq::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginReq.password)
}
inline std::string* PhoneLoginReq::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginReq.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginReq::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginReq.password)
}

// -------------------------------------------------------------------

// PhoneLoginRsp

// string request_id = 1;
inline void PhoneLoginRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneLoginRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginRsp.request_id)
  return _internal_request_id();
}
inline void PhoneLoginRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginRsp.request_id)
}
inline std::string* PhoneLoginRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& PhoneLoginRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void PhoneLoginRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginRsp.request_id)
}
inline void PhoneLoginRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginRsp.request_id)
}
inline void PhoneLoginRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginRsp.request_id)
}
inline std::string* PhoneLoginRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginRsp.request_id)
}
inline std::string* PhoneLoginRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginRsp.request_id)
}

// bool success = 2;
inline void PhoneLoginRsp::clear_success() {
  success_ = false;
}
inline bool PhoneLoginRsp::_internal_success() const {
  return success_;
}
inline bool PhoneLoginRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginRsp.success)
  return _internal_success();
}
inline void PhoneLoginRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PhoneLoginRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginRsp.success)
}

// string errmsg = 3;
inline void PhoneLoginRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneLoginRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginRsp.errmsg)
  return _internal_errmsg();
}
inline void PhoneLoginRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginRsp.errmsg)
}
inline std::string* PhoneLoginRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PhoneLoginRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void PhoneLoginRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginRsp.errmsg)
}
inline void PhoneLoginRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginRsp.errmsg)
}
inline void PhoneLoginRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginRsp.errmsg)
}
inline std::string* PhoneLoginRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginRsp.errmsg)
}
inline std::string* PhoneLoginRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginRsp.errmsg)
}

// string login_session_id = 4;
inline void PhoneLoginRsp::clear_login_session_id() {
  login_session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneLoginRsp::login_session_id() const {
  // @@protoc_insertion_point(field_get:lbk.PhoneLoginRsp.login_session_id)
  return _internal_login_session_id();
}
inline void PhoneLoginRsp::set_login_session_id(const std::string& value) {
  _internal_set_login_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.PhoneLoginRsp.login_session_id)
}
inline std::string* PhoneLoginRsp::mutable_login_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.PhoneLoginRsp.login_session_id)
  return _internal_mutable_login_session_id();
}
inline const std::string& PhoneLoginRsp::_internal_login_session_id() const {
  return login_session_id_.Get();
}
inline void PhoneLoginRsp::_internal_set_login_session_id(const std::string& value) {
  
  login_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneLoginRsp::set_login_session_id(std::string&& value) {
  
  login_session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.PhoneLoginRsp.login_session_id)
}
inline void PhoneLoginRsp::set_login_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.PhoneLoginRsp.login_session_id)
}
inline void PhoneLoginRsp::set_login_session_id(const char* value,
    size_t size) {
  
  login_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.PhoneLoginRsp.login_session_id)
}
inline std::string* PhoneLoginRsp::_internal_mutable_login_session_id() {
  
  return login_session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneLoginRsp::release_login_session_id() {
  // @@protoc_insertion_point(field_release:lbk.PhoneLoginRsp.login_session_id)
  return login_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneLoginRsp::set_allocated_login_session_id(std::string* login_session_id) {
  if (login_session_id != nullptr) {
    
  } else {
    
  }
  login_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.PhoneLoginRsp.login_session_id)
}
inline std::string* PhoneLoginRsp::unsafe_arena_release_login_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.PhoneLoginRsp.login_session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PhoneLoginRsp::unsafe_arena_set_allocated_login_session_id(
    std::string* login_session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_session_id != nullptr) {
    
  } else {
    
  }
  login_session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.PhoneLoginRsp.login_session_id)
}

// -------------------------------------------------------------------

// GetUserInfoReq

// string request_id = 1;
inline void GetUserInfoReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserInfoReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetUserInfoReq.request_id)
  return _internal_request_id();
}
inline void GetUserInfoReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetUserInfoReq.request_id)
}
inline std::string* GetUserInfoReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetUserInfoReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetUserInfoReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetUserInfoReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserInfoReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetUserInfoReq.request_id)
}
inline void GetUserInfoReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetUserInfoReq.request_id)
}
inline void GetUserInfoReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetUserInfoReq.request_id)
}
inline std::string* GetUserInfoReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserInfoReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetUserInfoReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserInfoReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetUserInfoReq.request_id)
}
inline std::string* GetUserInfoReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetUserInfoReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserInfoReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetUserInfoReq.request_id)
}

// string user_id = 2;
inline bool GetUserInfoReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetUserInfoReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetUserInfoReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetUserInfoReq.user_id)
  return _internal_user_id();
}
inline void GetUserInfoReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetUserInfoReq.user_id)
}
inline std::string* GetUserInfoReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetUserInfoReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& GetUserInfoReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetUserInfoReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserInfoReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetUserInfoReq.user_id)
}
inline void GetUserInfoReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetUserInfoReq.user_id)
}
inline void GetUserInfoReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetUserInfoReq.user_id)
}
inline std::string* GetUserInfoReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserInfoReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.GetUserInfoReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserInfoReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetUserInfoReq.user_id)
}
inline std::string* GetUserInfoReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetUserInfoReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserInfoReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetUserInfoReq.user_id)
}

// string session_id = 3;
inline bool GetUserInfoReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetUserInfoReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetUserInfoReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetUserInfoReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetUserInfoReq.session_id)
  return _internal_session_id();
}
inline void GetUserInfoReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetUserInfoReq.session_id)
}
inline std::string* GetUserInfoReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetUserInfoReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetUserInfoReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetUserInfoReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserInfoReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetUserInfoReq.session_id)
}
inline void GetUserInfoReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetUserInfoReq.session_id)
}
inline void GetUserInfoReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetUserInfoReq.session_id)
}
inline std::string* GetUserInfoReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserInfoReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.GetUserInfoReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserInfoReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetUserInfoReq.session_id)
}
inline std::string* GetUserInfoReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetUserInfoReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserInfoReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetUserInfoReq.session_id)
}

// -------------------------------------------------------------------

// GetUserInfoRsp

// string request_id = 1;
inline void GetUserInfoRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserInfoRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetUserInfoRsp.request_id)
  return _internal_request_id();
}
inline void GetUserInfoRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetUserInfoRsp.request_id)
}
inline std::string* GetUserInfoRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetUserInfoRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetUserInfoRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetUserInfoRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserInfoRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetUserInfoRsp.request_id)
}
inline void GetUserInfoRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetUserInfoRsp.request_id)
}
inline void GetUserInfoRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetUserInfoRsp.request_id)
}
inline std::string* GetUserInfoRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserInfoRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetUserInfoRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserInfoRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetUserInfoRsp.request_id)
}
inline std::string* GetUserInfoRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetUserInfoRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserInfoRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetUserInfoRsp.request_id)
}

// bool success = 2;
inline void GetUserInfoRsp::clear_success() {
  success_ = false;
}
inline bool GetUserInfoRsp::_internal_success() const {
  return success_;
}
inline bool GetUserInfoRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.GetUserInfoRsp.success)
  return _internal_success();
}
inline void GetUserInfoRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetUserInfoRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.GetUserInfoRsp.success)
}

// string errmsg = 3;
inline void GetUserInfoRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserInfoRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.GetUserInfoRsp.errmsg)
  return _internal_errmsg();
}
inline void GetUserInfoRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.GetUserInfoRsp.errmsg)
}
inline std::string* GetUserInfoRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.GetUserInfoRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& GetUserInfoRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetUserInfoRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserInfoRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetUserInfoRsp.errmsg)
}
inline void GetUserInfoRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetUserInfoRsp.errmsg)
}
inline void GetUserInfoRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetUserInfoRsp.errmsg)
}
inline std::string* GetUserInfoRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserInfoRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.GetUserInfoRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserInfoRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetUserInfoRsp.errmsg)
}
inline std::string* GetUserInfoRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetUserInfoRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserInfoRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetUserInfoRsp.errmsg)
}

// .lbk.UserInfo user_info = 4;
inline bool GetUserInfoRsp::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool GetUserInfoRsp::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::lbk::UserInfo& GetUserInfoRsp::_internal_user_info() const {
  const ::lbk::UserInfo* p = user_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lbk::UserInfo*>(
      &::lbk::_UserInfo_default_instance_);
}
inline const ::lbk::UserInfo& GetUserInfoRsp::user_info() const {
  // @@protoc_insertion_point(field_get:lbk.GetUserInfoRsp.user_info)
  return _internal_user_info();
}
inline void GetUserInfoRsp::unsafe_arena_set_allocated_user_info(
    ::lbk::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetUserInfoRsp.user_info)
}
inline ::lbk::UserInfo* GetUserInfoRsp::release_user_info() {
  auto temp = unsafe_arena_release_user_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lbk::UserInfo* GetUserInfoRsp::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:lbk.GetUserInfoRsp.user_info)
  
  ::lbk::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::lbk::UserInfo* GetUserInfoRsp::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::lbk::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::lbk::UserInfo* GetUserInfoRsp::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:lbk.GetUserInfoRsp.user_info)
  return _internal_mutable_user_info();
}
inline void GetUserInfoRsp::set_allocated_user_info(::lbk::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:lbk.GetUserInfoRsp.user_info)
}

// -------------------------------------------------------------------

// GetMultiUserInfoReq

// string request_id = 1;
inline void GetMultiUserInfoReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMultiUserInfoReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetMultiUserInfoReq.request_id)
  return _internal_request_id();
}
inline void GetMultiUserInfoReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetMultiUserInfoReq.request_id)
}
inline std::string* GetMultiUserInfoReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetMultiUserInfoReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetMultiUserInfoReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetMultiUserInfoReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMultiUserInfoReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetMultiUserInfoReq.request_id)
}
inline void GetMultiUserInfoReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetMultiUserInfoReq.request_id)
}
inline void GetMultiUserInfoReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetMultiUserInfoReq.request_id)
}
inline std::string* GetMultiUserInfoReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMultiUserInfoReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetMultiUserInfoReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMultiUserInfoReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetMultiUserInfoReq.request_id)
}
inline std::string* GetMultiUserInfoReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetMultiUserInfoReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMultiUserInfoReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetMultiUserInfoReq.request_id)
}

// repeated string users_id = 2;
inline int GetMultiUserInfoReq::_internal_users_id_size() const {
  return users_id_.size();
}
inline int GetMultiUserInfoReq::users_id_size() const {
  return _internal_users_id_size();
}
inline void GetMultiUserInfoReq::clear_users_id() {
  users_id_.Clear();
}
inline std::string* GetMultiUserInfoReq::add_users_id() {
  // @@protoc_insertion_point(field_add_mutable:lbk.GetMultiUserInfoReq.users_id)
  return _internal_add_users_id();
}
inline const std::string& GetMultiUserInfoReq::_internal_users_id(int index) const {
  return users_id_.Get(index);
}
inline const std::string& GetMultiUserInfoReq::users_id(int index) const {
  // @@protoc_insertion_point(field_get:lbk.GetMultiUserInfoReq.users_id)
  return _internal_users_id(index);
}
inline std::string* GetMultiUserInfoReq::mutable_users_id(int index) {
  // @@protoc_insertion_point(field_mutable:lbk.GetMultiUserInfoReq.users_id)
  return users_id_.Mutable(index);
}
inline void GetMultiUserInfoReq::set_users_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lbk.GetMultiUserInfoReq.users_id)
  users_id_.Mutable(index)->assign(value);
}
inline void GetMultiUserInfoReq::set_users_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lbk.GetMultiUserInfoReq.users_id)
  users_id_.Mutable(index)->assign(std::move(value));
}
inline void GetMultiUserInfoReq::set_users_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  users_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbk.GetMultiUserInfoReq.users_id)
}
inline void GetMultiUserInfoReq::set_users_id(int index, const char* value, size_t size) {
  users_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbk.GetMultiUserInfoReq.users_id)
}
inline std::string* GetMultiUserInfoReq::_internal_add_users_id() {
  return users_id_.Add();
}
inline void GetMultiUserInfoReq::add_users_id(const std::string& value) {
  users_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbk.GetMultiUserInfoReq.users_id)
}
inline void GetMultiUserInfoReq::add_users_id(std::string&& value) {
  users_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lbk.GetMultiUserInfoReq.users_id)
}
inline void GetMultiUserInfoReq::add_users_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  users_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbk.GetMultiUserInfoReq.users_id)
}
inline void GetMultiUserInfoReq::add_users_id(const char* value, size_t size) {
  users_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbk.GetMultiUserInfoReq.users_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMultiUserInfoReq::users_id() const {
  // @@protoc_insertion_point(field_list:lbk.GetMultiUserInfoReq.users_id)
  return users_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMultiUserInfoReq::mutable_users_id() {
  // @@protoc_insertion_point(field_mutable_list:lbk.GetMultiUserInfoReq.users_id)
  return &users_id_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetMultiUserInfoRsp

// string request_id = 1;
inline void GetMultiUserInfoRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMultiUserInfoRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.GetMultiUserInfoRsp.request_id)
  return _internal_request_id();
}
inline void GetMultiUserInfoRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.GetMultiUserInfoRsp.request_id)
}
inline std::string* GetMultiUserInfoRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.GetMultiUserInfoRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetMultiUserInfoRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetMultiUserInfoRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMultiUserInfoRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetMultiUserInfoRsp.request_id)
}
inline void GetMultiUserInfoRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetMultiUserInfoRsp.request_id)
}
inline void GetMultiUserInfoRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetMultiUserInfoRsp.request_id)
}
inline std::string* GetMultiUserInfoRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMultiUserInfoRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.GetMultiUserInfoRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMultiUserInfoRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetMultiUserInfoRsp.request_id)
}
inline std::string* GetMultiUserInfoRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetMultiUserInfoRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMultiUserInfoRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetMultiUserInfoRsp.request_id)
}

// bool success = 2;
inline void GetMultiUserInfoRsp::clear_success() {
  success_ = false;
}
inline bool GetMultiUserInfoRsp::_internal_success() const {
  return success_;
}
inline bool GetMultiUserInfoRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.GetMultiUserInfoRsp.success)
  return _internal_success();
}
inline void GetMultiUserInfoRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetMultiUserInfoRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.GetMultiUserInfoRsp.success)
}

// string errmsg = 3;
inline void GetMultiUserInfoRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMultiUserInfoRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.GetMultiUserInfoRsp.errmsg)
  return _internal_errmsg();
}
inline void GetMultiUserInfoRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.GetMultiUserInfoRsp.errmsg)
}
inline std::string* GetMultiUserInfoRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.GetMultiUserInfoRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& GetMultiUserInfoRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetMultiUserInfoRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMultiUserInfoRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.GetMultiUserInfoRsp.errmsg)
}
inline void GetMultiUserInfoRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.GetMultiUserInfoRsp.errmsg)
}
inline void GetMultiUserInfoRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.GetMultiUserInfoRsp.errmsg)
}
inline std::string* GetMultiUserInfoRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMultiUserInfoRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.GetMultiUserInfoRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMultiUserInfoRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.GetMultiUserInfoRsp.errmsg)
}
inline std::string* GetMultiUserInfoRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.GetMultiUserInfoRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMultiUserInfoRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.GetMultiUserInfoRsp.errmsg)
}

// map<string, .lbk.UserInfo> users_info = 4;
inline int GetMultiUserInfoRsp::_internal_users_info_size() const {
  return users_info_.size();
}
inline int GetMultiUserInfoRsp::users_info_size() const {
  return _internal_users_info_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >&
GetMultiUserInfoRsp::_internal_users_info() const {
  return users_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >&
GetMultiUserInfoRsp::users_info() const {
  // @@protoc_insertion_point(field_map:lbk.GetMultiUserInfoRsp.users_info)
  return _internal_users_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >*
GetMultiUserInfoRsp::_internal_mutable_users_info() {
  return users_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lbk::UserInfo >*
GetMultiUserInfoRsp::mutable_users_info() {
  // @@protoc_insertion_point(field_mutable_map:lbk.GetMultiUserInfoRsp.users_info)
  return _internal_mutable_users_info();
}

// -------------------------------------------------------------------

// SetUserAvatarReq

// string request_id = 1;
inline void SetUserAvatarReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserAvatarReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserAvatarReq.request_id)
  return _internal_request_id();
}
inline void SetUserAvatarReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserAvatarReq.request_id)
}
inline std::string* SetUserAvatarReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserAvatarReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserAvatarReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserAvatarReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserAvatarReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserAvatarReq.request_id)
}
inline void SetUserAvatarReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserAvatarReq.request_id)
}
inline void SetUserAvatarReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserAvatarReq.request_id)
}
inline std::string* SetUserAvatarReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserAvatarReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserAvatarReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserAvatarReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserAvatarReq.request_id)
}
inline std::string* SetUserAvatarReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserAvatarReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserAvatarReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserAvatarReq.request_id)
}

// string user_id = 2;
inline bool SetUserAvatarReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetUserAvatarReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void SetUserAvatarReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetUserAvatarReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserAvatarReq.user_id)
  return _internal_user_id();
}
inline void SetUserAvatarReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserAvatarReq.user_id)
}
inline std::string* SetUserAvatarReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserAvatarReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& SetUserAvatarReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void SetUserAvatarReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserAvatarReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserAvatarReq.user_id)
}
inline void SetUserAvatarReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserAvatarReq.user_id)
}
inline void SetUserAvatarReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserAvatarReq.user_id)
}
inline std::string* SetUserAvatarReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserAvatarReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserAvatarReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserAvatarReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserAvatarReq.user_id)
}
inline std::string* SetUserAvatarReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserAvatarReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserAvatarReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserAvatarReq.user_id)
}

// string session_id = 3;
inline bool SetUserAvatarReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetUserAvatarReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void SetUserAvatarReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetUserAvatarReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserAvatarReq.session_id)
  return _internal_session_id();
}
inline void SetUserAvatarReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserAvatarReq.session_id)
}
inline std::string* SetUserAvatarReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserAvatarReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& SetUserAvatarReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void SetUserAvatarReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserAvatarReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserAvatarReq.session_id)
}
inline void SetUserAvatarReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserAvatarReq.session_id)
}
inline void SetUserAvatarReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserAvatarReq.session_id)
}
inline std::string* SetUserAvatarReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserAvatarReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserAvatarReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserAvatarReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserAvatarReq.session_id)
}
inline std::string* SetUserAvatarReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserAvatarReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserAvatarReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserAvatarReq.session_id)
}

// bytes avatar = 4;
inline void SetUserAvatarReq::clear_avatar() {
  avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserAvatarReq::avatar() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserAvatarReq.avatar)
  return _internal_avatar();
}
inline void SetUserAvatarReq::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserAvatarReq.avatar)
}
inline std::string* SetUserAvatarReq::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserAvatarReq.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& SetUserAvatarReq::_internal_avatar() const {
  return avatar_.Get();
}
inline void SetUserAvatarReq::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserAvatarReq::set_avatar(std::string&& value) {
  
  avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserAvatarReq.avatar)
}
inline void SetUserAvatarReq::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserAvatarReq.avatar)
}
inline void SetUserAvatarReq::set_avatar(const void* value,
    size_t size) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserAvatarReq.avatar)
}
inline std::string* SetUserAvatarReq::_internal_mutable_avatar() {
  
  return avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserAvatarReq::release_avatar() {
  // @@protoc_insertion_point(field_release:lbk.SetUserAvatarReq.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserAvatarReq::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserAvatarReq.avatar)
}
inline std::string* SetUserAvatarReq::unsafe_arena_release_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserAvatarReq.avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserAvatarReq::unsafe_arena_set_allocated_avatar(
    std::string* avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserAvatarReq.avatar)
}

// -------------------------------------------------------------------

// SetUserAvatarRsp

// string request_id = 1;
inline void SetUserAvatarRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserAvatarRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserAvatarRsp.request_id)
  return _internal_request_id();
}
inline void SetUserAvatarRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserAvatarRsp.request_id)
}
inline std::string* SetUserAvatarRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserAvatarRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserAvatarRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserAvatarRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserAvatarRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserAvatarRsp.request_id)
}
inline void SetUserAvatarRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserAvatarRsp.request_id)
}
inline void SetUserAvatarRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserAvatarRsp.request_id)
}
inline std::string* SetUserAvatarRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserAvatarRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserAvatarRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserAvatarRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserAvatarRsp.request_id)
}
inline std::string* SetUserAvatarRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserAvatarRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserAvatarRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserAvatarRsp.request_id)
}

// bool success = 2;
inline void SetUserAvatarRsp::clear_success() {
  success_ = false;
}
inline bool SetUserAvatarRsp::_internal_success() const {
  return success_;
}
inline bool SetUserAvatarRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserAvatarRsp.success)
  return _internal_success();
}
inline void SetUserAvatarRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SetUserAvatarRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserAvatarRsp.success)
}

// string errmsg = 3;
inline void SetUserAvatarRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserAvatarRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserAvatarRsp.errmsg)
  return _internal_errmsg();
}
inline void SetUserAvatarRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserAvatarRsp.errmsg)
}
inline std::string* SetUserAvatarRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserAvatarRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& SetUserAvatarRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void SetUserAvatarRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserAvatarRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserAvatarRsp.errmsg)
}
inline void SetUserAvatarRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserAvatarRsp.errmsg)
}
inline void SetUserAvatarRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserAvatarRsp.errmsg)
}
inline std::string* SetUserAvatarRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserAvatarRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.SetUserAvatarRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserAvatarRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserAvatarRsp.errmsg)
}
inline std::string* SetUserAvatarRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserAvatarRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserAvatarRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserAvatarRsp.errmsg)
}

// -------------------------------------------------------------------

// SetUserNicknameReq

// string request_id = 1;
inline void SetUserNicknameReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserNicknameReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserNicknameReq.request_id)
  return _internal_request_id();
}
inline void SetUserNicknameReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserNicknameReq.request_id)
}
inline std::string* SetUserNicknameReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserNicknameReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserNicknameReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserNicknameReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserNicknameReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserNicknameReq.request_id)
}
inline void SetUserNicknameReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserNicknameReq.request_id)
}
inline void SetUserNicknameReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserNicknameReq.request_id)
}
inline std::string* SetUserNicknameReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserNicknameReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserNicknameReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserNicknameReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserNicknameReq.request_id)
}
inline std::string* SetUserNicknameReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserNicknameReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserNicknameReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserNicknameReq.request_id)
}

// string user_id = 2;
inline bool SetUserNicknameReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetUserNicknameReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void SetUserNicknameReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetUserNicknameReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserNicknameReq.user_id)
  return _internal_user_id();
}
inline void SetUserNicknameReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserNicknameReq.user_id)
}
inline std::string* SetUserNicknameReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserNicknameReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& SetUserNicknameReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void SetUserNicknameReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserNicknameReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserNicknameReq.user_id)
}
inline void SetUserNicknameReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserNicknameReq.user_id)
}
inline void SetUserNicknameReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserNicknameReq.user_id)
}
inline std::string* SetUserNicknameReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserNicknameReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserNicknameReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserNicknameReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserNicknameReq.user_id)
}
inline std::string* SetUserNicknameReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserNicknameReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserNicknameReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserNicknameReq.user_id)
}

// string session_id = 3;
inline bool SetUserNicknameReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetUserNicknameReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void SetUserNicknameReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetUserNicknameReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserNicknameReq.session_id)
  return _internal_session_id();
}
inline void SetUserNicknameReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserNicknameReq.session_id)
}
inline std::string* SetUserNicknameReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserNicknameReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& SetUserNicknameReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void SetUserNicknameReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserNicknameReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserNicknameReq.session_id)
}
inline void SetUserNicknameReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserNicknameReq.session_id)
}
inline void SetUserNicknameReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserNicknameReq.session_id)
}
inline std::string* SetUserNicknameReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserNicknameReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserNicknameReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserNicknameReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserNicknameReq.session_id)
}
inline std::string* SetUserNicknameReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserNicknameReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserNicknameReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserNicknameReq.session_id)
}

// string nickname = 4;
inline void SetUserNicknameReq::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserNicknameReq::nickname() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserNicknameReq.nickname)
  return _internal_nickname();
}
inline void SetUserNicknameReq::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserNicknameReq.nickname)
}
inline std::string* SetUserNicknameReq::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserNicknameReq.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& SetUserNicknameReq::_internal_nickname() const {
  return nickname_.Get();
}
inline void SetUserNicknameReq::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserNicknameReq::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserNicknameReq.nickname)
}
inline void SetUserNicknameReq::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserNicknameReq.nickname)
}
inline void SetUserNicknameReq::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserNicknameReq.nickname)
}
inline std::string* SetUserNicknameReq::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserNicknameReq::release_nickname() {
  // @@protoc_insertion_point(field_release:lbk.SetUserNicknameReq.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserNicknameReq::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserNicknameReq.nickname)
}
inline std::string* SetUserNicknameReq::unsafe_arena_release_nickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserNicknameReq.nickname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nickname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserNicknameReq::unsafe_arena_set_allocated_nickname(
    std::string* nickname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nickname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserNicknameReq.nickname)
}

// -------------------------------------------------------------------

// SetUserNicknameRsp

// string request_id = 1;
inline void SetUserNicknameRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserNicknameRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserNicknameRsp.request_id)
  return _internal_request_id();
}
inline void SetUserNicknameRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserNicknameRsp.request_id)
}
inline std::string* SetUserNicknameRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserNicknameRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserNicknameRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserNicknameRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserNicknameRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserNicknameRsp.request_id)
}
inline void SetUserNicknameRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserNicknameRsp.request_id)
}
inline void SetUserNicknameRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserNicknameRsp.request_id)
}
inline std::string* SetUserNicknameRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserNicknameRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserNicknameRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserNicknameRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserNicknameRsp.request_id)
}
inline std::string* SetUserNicknameRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserNicknameRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserNicknameRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserNicknameRsp.request_id)
}

// bool success = 2;
inline void SetUserNicknameRsp::clear_success() {
  success_ = false;
}
inline bool SetUserNicknameRsp::_internal_success() const {
  return success_;
}
inline bool SetUserNicknameRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserNicknameRsp.success)
  return _internal_success();
}
inline void SetUserNicknameRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SetUserNicknameRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserNicknameRsp.success)
}

// string errmsg = 3;
inline void SetUserNicknameRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserNicknameRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserNicknameRsp.errmsg)
  return _internal_errmsg();
}
inline void SetUserNicknameRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserNicknameRsp.errmsg)
}
inline std::string* SetUserNicknameRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserNicknameRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& SetUserNicknameRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void SetUserNicknameRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserNicknameRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserNicknameRsp.errmsg)
}
inline void SetUserNicknameRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserNicknameRsp.errmsg)
}
inline void SetUserNicknameRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserNicknameRsp.errmsg)
}
inline std::string* SetUserNicknameRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserNicknameRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.SetUserNicknameRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserNicknameRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserNicknameRsp.errmsg)
}
inline std::string* SetUserNicknameRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserNicknameRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserNicknameRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserNicknameRsp.errmsg)
}

// -------------------------------------------------------------------

// SetUserDescriptionReq

// string request_id = 1;
inline void SetUserDescriptionReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserDescriptionReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserDescriptionReq.request_id)
  return _internal_request_id();
}
inline void SetUserDescriptionReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserDescriptionReq.request_id)
}
inline std::string* SetUserDescriptionReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserDescriptionReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserDescriptionReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserDescriptionReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserDescriptionReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserDescriptionReq.request_id)
}
inline void SetUserDescriptionReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserDescriptionReq.request_id)
}
inline void SetUserDescriptionReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserDescriptionReq.request_id)
}
inline std::string* SetUserDescriptionReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserDescriptionReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserDescriptionReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserDescriptionReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserDescriptionReq.request_id)
}
inline std::string* SetUserDescriptionReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserDescriptionReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserDescriptionReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserDescriptionReq.request_id)
}

// string user_id = 2;
inline bool SetUserDescriptionReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetUserDescriptionReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void SetUserDescriptionReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetUserDescriptionReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserDescriptionReq.user_id)
  return _internal_user_id();
}
inline void SetUserDescriptionReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserDescriptionReq.user_id)
}
inline std::string* SetUserDescriptionReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserDescriptionReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& SetUserDescriptionReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void SetUserDescriptionReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserDescriptionReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserDescriptionReq.user_id)
}
inline void SetUserDescriptionReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserDescriptionReq.user_id)
}
inline void SetUserDescriptionReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserDescriptionReq.user_id)
}
inline std::string* SetUserDescriptionReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserDescriptionReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserDescriptionReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserDescriptionReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserDescriptionReq.user_id)
}
inline std::string* SetUserDescriptionReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserDescriptionReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserDescriptionReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserDescriptionReq.user_id)
}

// string session_id = 3;
inline bool SetUserDescriptionReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetUserDescriptionReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void SetUserDescriptionReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetUserDescriptionReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserDescriptionReq.session_id)
  return _internal_session_id();
}
inline void SetUserDescriptionReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserDescriptionReq.session_id)
}
inline std::string* SetUserDescriptionReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserDescriptionReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& SetUserDescriptionReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void SetUserDescriptionReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserDescriptionReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserDescriptionReq.session_id)
}
inline void SetUserDescriptionReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserDescriptionReq.session_id)
}
inline void SetUserDescriptionReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserDescriptionReq.session_id)
}
inline std::string* SetUserDescriptionReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserDescriptionReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserDescriptionReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserDescriptionReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserDescriptionReq.session_id)
}
inline std::string* SetUserDescriptionReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserDescriptionReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserDescriptionReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserDescriptionReq.session_id)
}

// string description = 4;
inline void SetUserDescriptionReq::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserDescriptionReq::description() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserDescriptionReq.description)
  return _internal_description();
}
inline void SetUserDescriptionReq::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserDescriptionReq.description)
}
inline std::string* SetUserDescriptionReq::mutable_description() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserDescriptionReq.description)
  return _internal_mutable_description();
}
inline const std::string& SetUserDescriptionReq::_internal_description() const {
  return description_.Get();
}
inline void SetUserDescriptionReq::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserDescriptionReq::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserDescriptionReq.description)
}
inline void SetUserDescriptionReq::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserDescriptionReq.description)
}
inline void SetUserDescriptionReq::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserDescriptionReq.description)
}
inline std::string* SetUserDescriptionReq::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserDescriptionReq::release_description() {
  // @@protoc_insertion_point(field_release:lbk.SetUserDescriptionReq.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserDescriptionReq::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserDescriptionReq.description)
}
inline std::string* SetUserDescriptionReq::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserDescriptionReq.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserDescriptionReq::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserDescriptionReq.description)
}

// -------------------------------------------------------------------

// SetUserDescriptionRsp

// string request_id = 1;
inline void SetUserDescriptionRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserDescriptionRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserDescriptionRsp.request_id)
  return _internal_request_id();
}
inline void SetUserDescriptionRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserDescriptionRsp.request_id)
}
inline std::string* SetUserDescriptionRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserDescriptionRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserDescriptionRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserDescriptionRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserDescriptionRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserDescriptionRsp.request_id)
}
inline void SetUserDescriptionRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserDescriptionRsp.request_id)
}
inline void SetUserDescriptionRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserDescriptionRsp.request_id)
}
inline std::string* SetUserDescriptionRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserDescriptionRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserDescriptionRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserDescriptionRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserDescriptionRsp.request_id)
}
inline std::string* SetUserDescriptionRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserDescriptionRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserDescriptionRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserDescriptionRsp.request_id)
}

// bool success = 2;
inline void SetUserDescriptionRsp::clear_success() {
  success_ = false;
}
inline bool SetUserDescriptionRsp::_internal_success() const {
  return success_;
}
inline bool SetUserDescriptionRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserDescriptionRsp.success)
  return _internal_success();
}
inline void SetUserDescriptionRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SetUserDescriptionRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserDescriptionRsp.success)
}

// string errmsg = 3;
inline void SetUserDescriptionRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserDescriptionRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserDescriptionRsp.errmsg)
  return _internal_errmsg();
}
inline void SetUserDescriptionRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserDescriptionRsp.errmsg)
}
inline std::string* SetUserDescriptionRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserDescriptionRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& SetUserDescriptionRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void SetUserDescriptionRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserDescriptionRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserDescriptionRsp.errmsg)
}
inline void SetUserDescriptionRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserDescriptionRsp.errmsg)
}
inline void SetUserDescriptionRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserDescriptionRsp.errmsg)
}
inline std::string* SetUserDescriptionRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserDescriptionRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.SetUserDescriptionRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserDescriptionRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserDescriptionRsp.errmsg)
}
inline std::string* SetUserDescriptionRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserDescriptionRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserDescriptionRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserDescriptionRsp.errmsg)
}

// -------------------------------------------------------------------

// SetUserPhoneNumberReq

// string request_id = 1;
inline void SetUserPhoneNumberReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserPhoneNumberReq::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberReq.request_id)
  return _internal_request_id();
}
inline void SetUserPhoneNumberReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberReq.request_id)
}
inline std::string* SetUserPhoneNumberReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserPhoneNumberReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserPhoneNumberReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberReq.request_id)
}
inline void SetUserPhoneNumberReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberReq.request_id)
}
inline void SetUserPhoneNumberReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberReq.request_id)
}
inline std::string* SetUserPhoneNumberReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberReq::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberReq.request_id)
}
inline std::string* SetUserPhoneNumberReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberReq.request_id)
}

// string user_id = 2;
inline bool SetUserPhoneNumberReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetUserPhoneNumberReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void SetUserPhoneNumberReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetUserPhoneNumberReq::user_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberReq.user_id)
  return _internal_user_id();
}
inline void SetUserPhoneNumberReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberReq.user_id)
}
inline std::string* SetUserPhoneNumberReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& SetUserPhoneNumberReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void SetUserPhoneNumberReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberReq.user_id)
}
inline void SetUserPhoneNumberReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberReq.user_id)
}
inline void SetUserPhoneNumberReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberReq.user_id)
}
inline std::string* SetUserPhoneNumberReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberReq::release_user_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberReq.user_id)
}
inline std::string* SetUserPhoneNumberReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberReq.user_id)
}

// string session_id = 3;
inline bool SetUserPhoneNumberReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetUserPhoneNumberReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void SetUserPhoneNumberReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetUserPhoneNumberReq::session_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberReq.session_id)
  return _internal_session_id();
}
inline void SetUserPhoneNumberReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberReq.session_id)
}
inline std::string* SetUserPhoneNumberReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& SetUserPhoneNumberReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void SetUserPhoneNumberReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberReq.session_id)
}
inline void SetUserPhoneNumberReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberReq.session_id)
}
inline void SetUserPhoneNumberReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberReq.session_id)
}
inline std::string* SetUserPhoneNumberReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberReq::release_session_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberReq.session_id)
}
inline std::string* SetUserPhoneNumberReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberReq.session_id)
}

// string phone_number = 4;
inline void SetUserPhoneNumberReq::clear_phone_number() {
  phone_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserPhoneNumberReq::phone_number() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberReq.phone_number)
  return _internal_phone_number();
}
inline void SetUserPhoneNumberReq::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberReq.phone_number)
}
inline std::string* SetUserPhoneNumberReq::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberReq.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& SetUserPhoneNumberReq::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void SetUserPhoneNumberReq::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberReq::set_phone_number(std::string&& value) {
  
  phone_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberReq.phone_number)
}
inline void SetUserPhoneNumberReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberReq.phone_number)
}
inline void SetUserPhoneNumberReq::set_phone_number(const char* value,
    size_t size) {
  
  phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberReq.phone_number)
}
inline std::string* SetUserPhoneNumberReq::_internal_mutable_phone_number() {
  
  return phone_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberReq.phone_number)
  return phone_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberReq::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberReq.phone_number)
}
inline std::string* SetUserPhoneNumberReq::unsafe_arena_release_phone_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberReq.phone_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phone_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberReq::unsafe_arena_set_allocated_phone_number(
    std::string* phone_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phone_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberReq.phone_number)
}

// string phone_verify_code_id = 5;
inline void SetUserPhoneNumberReq::clear_phone_verify_code_id() {
  phone_verify_code_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserPhoneNumberReq::phone_verify_code_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
  return _internal_phone_verify_code_id();
}
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(const std::string& value) {
  _internal_set_phone_verify_code_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
}
inline std::string* SetUserPhoneNumberReq::mutable_phone_verify_code_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
  return _internal_mutable_phone_verify_code_id();
}
inline const std::string& SetUserPhoneNumberReq::_internal_phone_verify_code_id() const {
  return phone_verify_code_id_.Get();
}
inline void SetUserPhoneNumberReq::_internal_set_phone_verify_code_id(const std::string& value) {
  
  phone_verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(std::string&& value) {
  
  phone_verify_code_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
}
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
}
inline void SetUserPhoneNumberReq::set_phone_verify_code_id(const char* value,
    size_t size) {
  
  phone_verify_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
}
inline std::string* SetUserPhoneNumberReq::_internal_mutable_phone_verify_code_id() {
  
  return phone_verify_code_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberReq::release_phone_verify_code_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
  return phone_verify_code_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberReq::set_allocated_phone_verify_code_id(std::string* phone_verify_code_id) {
  if (phone_verify_code_id != nullptr) {
    
  } else {
    
  }
  phone_verify_code_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_verify_code_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
}
inline std::string* SetUserPhoneNumberReq::unsafe_arena_release_phone_verify_code_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phone_verify_code_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberReq::unsafe_arena_set_allocated_phone_verify_code_id(
    std::string* phone_verify_code_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phone_verify_code_id != nullptr) {
    
  } else {
    
  }
  phone_verify_code_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phone_verify_code_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberReq.phone_verify_code_id)
}

// string phone_verify_code = 6;
inline void SetUserPhoneNumberReq::clear_phone_verify_code() {
  phone_verify_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserPhoneNumberReq::phone_verify_code() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberReq.phone_verify_code)
  return _internal_phone_verify_code();
}
inline void SetUserPhoneNumberReq::set_phone_verify_code(const std::string& value) {
  _internal_set_phone_verify_code(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberReq.phone_verify_code)
}
inline std::string* SetUserPhoneNumberReq::mutable_phone_verify_code() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberReq.phone_verify_code)
  return _internal_mutable_phone_verify_code();
}
inline const std::string& SetUserPhoneNumberReq::_internal_phone_verify_code() const {
  return phone_verify_code_.Get();
}
inline void SetUserPhoneNumberReq::_internal_set_phone_verify_code(const std::string& value) {
  
  phone_verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberReq::set_phone_verify_code(std::string&& value) {
  
  phone_verify_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberReq.phone_verify_code)
}
inline void SetUserPhoneNumberReq::set_phone_verify_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberReq.phone_verify_code)
}
inline void SetUserPhoneNumberReq::set_phone_verify_code(const char* value,
    size_t size) {
  
  phone_verify_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberReq.phone_verify_code)
}
inline std::string* SetUserPhoneNumberReq::_internal_mutable_phone_verify_code() {
  
  return phone_verify_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberReq::release_phone_verify_code() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberReq.phone_verify_code)
  return phone_verify_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberReq::set_allocated_phone_verify_code(std::string* phone_verify_code) {
  if (phone_verify_code != nullptr) {
    
  } else {
    
  }
  phone_verify_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_verify_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberReq.phone_verify_code)
}
inline std::string* SetUserPhoneNumberReq::unsafe_arena_release_phone_verify_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberReq.phone_verify_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phone_verify_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberReq::unsafe_arena_set_allocated_phone_verify_code(
    std::string* phone_verify_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phone_verify_code != nullptr) {
    
  } else {
    
  }
  phone_verify_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phone_verify_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberReq.phone_verify_code)
}

// -------------------------------------------------------------------

// SetUserPhoneNumberRsp

// string request_id = 1;
inline void SetUserPhoneNumberRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserPhoneNumberRsp::request_id() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberRsp.request_id)
  return _internal_request_id();
}
inline void SetUserPhoneNumberRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberRsp.request_id)
}
inline std::string* SetUserPhoneNumberRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SetUserPhoneNumberRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void SetUserPhoneNumberRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberRsp.request_id)
}
inline void SetUserPhoneNumberRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberRsp.request_id)
}
inline void SetUserPhoneNumberRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberRsp.request_id)
}
inline std::string* SetUserPhoneNumberRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberRsp.request_id)
}
inline std::string* SetUserPhoneNumberRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberRsp.request_id)
}

// bool success = 2;
inline void SetUserPhoneNumberRsp::clear_success() {
  success_ = false;
}
inline bool SetUserPhoneNumberRsp::_internal_success() const {
  return success_;
}
inline bool SetUserPhoneNumberRsp::success() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberRsp.success)
  return _internal_success();
}
inline void SetUserPhoneNumberRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SetUserPhoneNumberRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberRsp.success)
}

// string errmsg = 3;
inline void SetUserPhoneNumberRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetUserPhoneNumberRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:lbk.SetUserPhoneNumberRsp.errmsg)
  return _internal_errmsg();
}
inline void SetUserPhoneNumberRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:lbk.SetUserPhoneNumberRsp.errmsg)
}
inline std::string* SetUserPhoneNumberRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:lbk.SetUserPhoneNumberRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& SetUserPhoneNumberRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void SetUserPhoneNumberRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetUserPhoneNumberRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lbk.SetUserPhoneNumberRsp.errmsg)
}
inline void SetUserPhoneNumberRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lbk.SetUserPhoneNumberRsp.errmsg)
}
inline void SetUserPhoneNumberRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lbk.SetUserPhoneNumberRsp.errmsg)
}
inline std::string* SetUserPhoneNumberRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetUserPhoneNumberRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:lbk.SetUserPhoneNumberRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetUserPhoneNumberRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lbk.SetUserPhoneNumberRsp.errmsg)
}
inline std::string* SetUserPhoneNumberRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lbk.SetUserPhoneNumberRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetUserPhoneNumberRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbk.SetUserPhoneNumberRsp.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lbk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
